// Check against this value instead of 0.0 to reduce potential floating-point mistakes
#ifndef TINY_FLOAT
#define TINY_FLOAT 0.001
#endif

//===========================================================================
//
// Internal data.
//
//===========================================================================
// Internal timer references, need them to actually count down
Timer *Timers[MAX_RUNNING_TIMERS];
// Number of seconds in a game tick (updated)
float GameTickTime;
// Whether all timers should be paused when game is paused
bool AllPauseWithGame;
// Whether game was paused last time we checked
bool WasGamePaused;
// Whether 
bool IsGamePausedNow;


//===========================================================================
//
// FindFreeSlot()
// Finds a free timer slot, returns internal ID, or -1 if timers limit reached.
//
//===========================================================================
int FindFreeSlot()
{
  int i;
  for (i = 0; i < MAX_RUNNING_TIMERS; i++)
  {
    if (Timers[i] == null)
      return i;
  }
  return -1;
}

//===========================================================================
//
// Timer::Init().
// Inits timer parameters.
//
//===========================================================================
void Init(this Timer*, int id, bool realtime, float timeout, RepeatStyle repeat)
{
  this._id = id;
  this._realtime = realtime;
  this._timeout = timeout;
  this._repeat = repeat;
  this._remains = timeout;
  this._evt = false;
  this._paused = 0;
  this._pauseWithGame = false;
  this._room = -1;
  this._whenLeavingRoom = eTimerStop;
}

//===========================================================================
//
// Timer::StopImpl(), PauseImpl() and ResumeImpl()
// Internal implementations for stopping, pausing and resuming a timer.
//
//===========================================================================
void StopImpl(this Timer*)
{
  this._timeout = 0.0;
  this._remains = 0.0;
  this._evt = false;
  this._paused = 0;
}

void PauseImpl(this Timer*, int flag)
{
  this._paused = this._paused | flag;
}

void ResumeImpl(this Timer*, int flag)
{
  // Had to do this, because AGS script does not have "~"
  this._paused = this._paused & (TIMER_PAUSED_BY_USER + TIMER_PAUSED_BY_GAME + TIMER_PAUSED_BY_ROOM - flag);
}

//===========================================================================
//
// Timer::RemoveRef()
// Removes timer reference from the internal array.
//
//===========================================================================
void RemoveRef(this Timer*)
{
  if (this._id >= 0)
  {
    Timers[this._id] = null;
    this._id = -1;
  }
}

//===========================================================================
//
// Timer's read-only properties meant to inspect the object.
//
//===========================================================================
bool get_IsActive(this Timer*)
{
  return this._id >= 0;
}

bool get_EvtExpired(this Timer*)
{
  return this._evt;
}

bool get_IsRealtime(this Timer*)
{
  return this._realtime;
}

int get_TimeoutTicks(this Timer*)
{
  if (this._realtime)
    return FloatToInt(this._timeout * IntToFloat(GetGameSpeed()), eRoundUp);
  else
    return FloatToInt(this._timeout, eRoundUp);
}

float get_TimeoutSeconds(this Timer*)
{
  if (this._realtime)
    return this._timeout;
  else
    return this._timeout * GameTickTime;
}

int get_RemainingTicks(this Timer*)
{
  if (this._realtime)
    return FloatToInt(this._remains * IntToFloat(GetGameSpeed()), eRoundUp);
  else
    return FloatToInt(this._remains, eRoundUp);
}

float get_RemainingSeconds(this Timer*)
{
  if (this._realtime)
    return this._remains;
  else
    return this._remains * GameTickTime;
}

int get_IsPaused(this Timer*)
{
  return this._paused;
}

int get_HomeRoom(this Timer*)
{
  return this._room;
}

LocalTimerBehavior get_WhenLeavingRoom(this Timer*)
{
  return this._whenLeavingRoom;
}

//===========================================================================
//
// Timer::MakeLocal().
// Makes timer local to current room
//
//===========================================================================
void MakeLocal(this Timer*, LocalTimerBehavior on_leave)
{
  this._room = player.Room;
  this._whenLeavingRoom = on_leave;
}

//===========================================================================
//
// Timer::StartTimer()
// Create and start the global timer with the given parameters.
//
//===========================================================================
Timer *StartTimer(bool realtime, float timeout, RepeatStyle repeat)
{
  int id = FindFreeSlot();
  if (id == -1)
  {
    Display("Timer.asc: timers limit reached, cannot start another timer before any of the active ones has stopped.");
    return null;
  }
  Timer *timer = new Timer;
  timer.Init(id, realtime, timeout, repeat);
  Timers[id] = timer;
  return timer;
}

//===========================================================================
//
// Timer::StartTimerLocal()
// Create and start the locl timer with the given parameters.
//
//===========================================================================
Timer *StartTimerLocal(bool realtime, float timeout, LocalTimerBehavior on_leave, RepeatStyle repeat)
{
  Timer *t = StartTimer(realtime, timeout, repeat);
  if (t == null)
    return null;
  t.MakeLocal(on_leave);
  return t;
}

//===========================================================================
//
// Timer::Start() and StartLocal()
// Create and start the global or local timer with timeout given in game ticks.
//
//===========================================================================
static Timer *Timer::Start(int timeout, RepeatStyle repeat)
{
  return StartTimer(false, IntToFloat(timeout), repeat);
}

static Timer *Timer::StartLocal(int timeout, LocalTimerBehavior on_leave, RepeatStyle repeat)
{
  return StartTimerLocal(false, IntToFloat(timeout), on_leave, repeat);
}

//===========================================================================
//
// Timer::StartRT() and StartLocalRT()
// Create and start the global or local timer with timeout in real time (seconds).
//
//===========================================================================
static Timer *Timer::StartRT(float timeout_s, RepeatStyle repeat)
{
  return StartTimer(true, timeout_s, repeat);
}

static Timer *Timer::StartLocalRT(float timeout_s, LocalTimerBehavior on_leave, RepeatStyle repeat)
{
  return StartTimerLocal(true, timeout_s, on_leave, repeat);
}

//===========================================================================
//
// Timer::IsExpired().
// Tells whether timer has just expired. Safe to pass null-pointer.
//
//===========================================================================
static bool Timer::IsExpired(Timer *t)
{
  return t != null && t.get_EvtExpired();
}

//===========================================================================
//
// Timer::Stop(), Pause() and Resume().
// Stops, pauses and resumes the running timer. Safe to pass null-pointer.
//
//===========================================================================
static void Timer::Stop(Timer *t)
{
  if (t != null) {
    t.StopImpl();
    t.RemoveRef();
  }
}

static void Timer::Pause(Timer *t)
{
  if (t != null)
    t.PauseImpl(TIMER_PAUSED_BY_USER);
}

static void Timer::Resume(Timer *t)
{
  if (t != null)
    t.ResumeImpl(TIMER_PAUSED_BY_USER);
}

//===========================================================================
//
// Timer::AllPauseWithGame static property.
// Gets/sets whether all timers should pause when game is paused.
//
//===========================================================================
bool get_AllPauseWithGame(static Timer)
{
  return AllPauseWithGame;
}

void set_AllPauseWithGame(static Timer, bool pause)
{
  AllPauseWithGame = pause;
}

//===========================================================================
//
// Timer::PauseWithGame property.
// Gets/sets whether this particular timer should pause when game is paused.
//
//===========================================================================
bool get_PauseWithGame(this Timer*)
{
  return this._pauseWithGame;
}

void set_PauseWithGame(this Timer*, bool pause)
{
  this._pauseWithGame = pause;
}

//===========================================================================
//
// Timer::Countdown().
// Main update function. Counts down once and checks if timeout was reached.
//
//===========================================================================
bool Countdown(this Timer*)
{
  // If timer has finished on last tick, and is not repeating one, then tell system to release the timer object
  if (this._evt && !this._repeat)
    return false;

  // If timer is paused, skip an update
  if (this.get_IsPaused())
    return true;

  // Otherwise, counting down
  if (this._realtime)
    this._remains -= GameTickTime;
  else
    this._remains -= 1.0;
  // If timer just ran out, set event flag
  if (this._remains < TINY_FLOAT)
  {
    this._evt = true;
    if (this._repeat)
      this._remains = this._timeout; // if repeating, then reset
    // keep the timer reference for one more tick even if it's not repeating one
  }
  else
  {
    this._evt = false;
  }
  return true;
}


//===========================================================================
//
// on_event()
//
// Reacts to leaving and entering rooms.
//
//===========================================================================
function on_event(EventType event, int data)
{
  int i;
  if (event == eEventLeaveRoom)
  {
    for (i = 0; i < MAX_RUNNING_TIMERS; i++)
    {
      Timer *timer = Timers[i];
      if (timer == null)
        continue;
      if (timer.get_HomeRoom() == data)
      {
        if (timer.get_WhenLeavingRoom() == eTimerStop)
          timer.StopImpl();
        else
          timer.PauseImpl(TIMER_PAUSED_BY_ROOM);
      }
    }
  }
  else if (event == eEventEnterRoomBeforeFadein)
  {
    for (i = 0; i < MAX_RUNNING_TIMERS; i++)
    {
      Timer *timer = Timers[i];
      if (timer == null)
        continue;
      if (timer.get_HomeRoom() == data)
      {
        if (timer.get_WhenLeavingRoom() == eTimerPause)
          timer.ResumeImpl(TIMER_PAUSED_BY_ROOM);
      }
    }
  }
}

//===========================================================================
//
// repeatedly_execute_always()
//
// Updates the active timers.
//
//===========================================================================
function repeatedly_execute_always()
{
  // We have to update value of GameTickTime each time, unfortunately, in case game speed changed
  GameTickTime = 1.0 / IntToFloat(GetGameSpeed());
  // Set game paused flag (we can only do this in rep_exec (no distinct event)
  IsGamePausedNow = IsGamePaused();

  int i;
  if (IsGamePausedNow != WasGamePaused)
  {
    for (i = 0; i < MAX_RUNNING_TIMERS; i++)
    {
      Timer *timer = Timers[i];
      if (timer == null)
        continue;
      if (AllPauseWithGame || timer.get_PauseWithGame())
      {
        if (IsGamePausedNow)
          timer.PauseImpl(TIMER_PAUSED_BY_GAME);
        else
          timer.ResumeImpl(TIMER_PAUSED_BY_GAME);
      }
    }
    WasGamePaused = IsGamePausedNow;
    // Note, that we still call timer's countdown afterwards, even if they
    // are supposed to be paused, because Countdown function also checks for
    // the finalized timers (the ones waiting for event signal to be reset).
  }

  for (i = 0; i < MAX_RUNNING_TIMERS; i++)
  {
    Timer *timer = Timers[i];
    if (timer == null)
      continue;
    if (!timer.Countdown())
    {
      // If timer finished working, then stop it and remove its reference from the array
      Timer.Stop(timer);
    }
  }
}
