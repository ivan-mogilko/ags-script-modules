// room script file

enum Constants
{
  MyModeID = 10
};

function room_AfterFadeIn()
{
  RoomHelpText = "DEMO 2: Rectangles[[Hold the key and drag to see rectangle drawn on screen:[LMB - white rectangle,[A - red rectangle,[S - green rectangle,[D - blue rectangle.[[Hit SPACE once to enable white rectangle mode, hit again to disable.";
  DisplayRoomHelp();
  
  DragDrop.Enabled = true;
  DragDrop.DefaultHookKey = 0;
  DragDrop.DefaultHookMouseButton = 0;
  DragDrop.DragMinDistance = 10;
  DragDrop.DragMinTime = 0;
  DragDrop.AutoTrackHookKey = false;
  DragDrop.DefaultUnhookAction = eDDUnhookRevert;
  SetGameSpeed(300);
}

function room_Leave()
{
  SetGameSpeed(40);
  DragDrop.Enabled = false;
}

Rect old_rect;

void ClearOldRect(DrawingSurface* ds)
{
  ds.DrawingColor = Game.GetColorFromRGB(0, 0, 0);
  ds.DrawFrame(old_rect.x, old_rect.y, old_rect.x2, old_rect.y2);
}

function on_key_press(eKeyCode key)
{
  if (key == eKeySpace)
  {
    if (DragDrop.IsIdle)
    {
      DragDrop.HookKeyDown(eKeySpace, 0);
      DragDrop.AutoTrackHookKey = false;
    }
    else if (DragDrop.CurrentKey == eKeySpace)
    {
      DragDrop.Revert();
    }
  }
}

function room_RepExec()
{
  if (DragDrop.IsIdle)
  {
    if (Mouse.IsButtonDown(eMouseLeft))
      DragDrop.HookKeyDown(0, eMouseLeft);
    else if (IsKeyPressed(eKeyA))
      DragDrop.HookKeyDown(eKeyA, 0);
    else if (IsKeyPressed(eKeyS))
      DragDrop.HookKeyDown(eKeyS, 0);
    else if (IsKeyPressed(eKeyD))
      DragDrop.HookKeyDown(eKeyD, 0);
    DragDrop.AutoTrackHookKey = true;
  }
  
  if (DragDrop.EvtWantObject)
  {      
    int color = Game.GetColorFromRGB(255, 255, 255);
    if (DragDrop.CurrentKey == eKeyA)
      color = Game.GetColorFromRGB(255, 128, 128);
    else if (DragDrop.CurrentKey == eKeyS)
      color = Game.GetColorFromRGB(128, 255, 128);
    else if (DragDrop.CurrentKey == eKeyD)
      color = Game.GetColorFromRGB(128, 128, 255);
    DragDrop.HookObject(MyModeID, mouse.x, mouse.y, color);
  }
  
  gHookIcon.Visible = DragDrop.HasObjectHooked;
  if (gHookIcon.Visible)
  {
    int x = mouse.x + Game.SpriteWidth[mouse.GetModeGraphic(mouse.Mode)];
    int y = mouse.y - gHookIcon.Height;
    
    if (x >= Room.Width)
      x = Room.Width - 1;
    if (y >= Room.Height)
      y = Room.Height - 1;
      
    gHookIcon.X = x;
    gHookIcon.Y = y;
  }
  
  if (DragDrop.IsDragging)
  {
    DrawingSurface* ds = Room.GetDrawingSurfaceForBackground();
    ClearOldRect(ds);
    
    int x = DragDrop.ObjectStartX;
    int y = DragDrop.ObjectStartY;
    int x2 = DragDrop.ObjectX;
    int y2 = DragDrop.ObjectY;
    
    if (x > x2)
    {
      x += x2;
      x2 = x - x2;
      x -= x2;
    }
    if (y > y2)
    {
      y += y2;
      y2 = y - y2;
      y -= y2;
    }
    
    ds.DrawingColor = DragDrop.ObjectTag;
    ds.DrawFrame(x, y, x2, y2);
    ds.Release();
       
    old_rect.x = x;
    old_rect.y = y;
    old_rect.x2 = x2;
    old_rect.y2 = y2;
  }
  
  if (DragDrop.EvtDropped)
  {
    DrawingSurface* ds = Room.GetDrawingSurfaceForBackground();
    ClearOldRect(ds);
    ds.Release();
  }
}
