// room script file

enum ObjectColor
{
  colGray, 
  colRed, 
  colYellow, 
  colBlue, 
  colViolet, 
  MAX_COLORS
};

Rect ColorRc[MAX_COLORS];

function room_AfterFadeIn()
{
  ColorRc[colGray].x = 20;
  ColorRc[colGray].y = 10;
  ColorRc[colGray].x2 = ColorRc[colGray].x + 187;
  ColorRc[colGray].y2 = ColorRc[colGray].y + 71;
  
  ColorRc[colRed].x = 22;
  ColorRc[colRed].y = 108;
  ColorRc[colRed].x2 = ColorRc[colRed].x + 61;
  ColorRc[colRed].y2 = ColorRc[colRed].y + 60;
  
  ColorRc[colYellow].x = 106;
  ColorRc[colYellow].y = 116;
  ColorRc[colYellow].x2 = ColorRc[colYellow].x + 61;
  ColorRc[colYellow].y2 = ColorRc[colYellow].y + 60;
  
  ColorRc[colBlue].x = 186;
  ColorRc[colBlue].y = 104;
  ColorRc[colBlue].x2 = ColorRc[colBlue].x + 61;
  ColorRc[colBlue].y2 = ColorRc[colBlue].y + 60;
  
  ColorRc[colViolet].x = 242;
  ColorRc[colViolet].y = 28;
  ColorRc[colViolet].x2 = ColorRc[colViolet].x + 61;
  ColorRc[colViolet].y2 = ColorRc[colViolet].y + 60;
  
  RoomHelpText = "DEMO 3: Room Objects[[Drag and drop objects into the spots of corresponding color.[You can then drag them back into the GRAY inventory.[[Hold SPACE to drag in overlay mode.";
  DisplayRoomHelp();
  
  DragDrop.Enabled = true;
  DragDropCommon.ModeEnabled[eDragDropRoomObject] = true;
  DragDropCommon.DragMove = eDDCmnMoveSelf;
  DragDropCommon.GhostTransparency = 50;
  DragDropCommon.GhostAlpha = false;
  DragDrop.DefaultHookKey = 0;
  DragDrop.DefaultHookMouseButton = eMouseLeft;
  DragDrop.DragMinDistance = 0;
  DragDrop.DragMinTime = 0;
  DragDrop.AutoTrackHookKey = true;
  DragDrop.DefaultUnhookAction = eDDUnhookRevert;
}

function room_Leave()
{
  DragDropCommon.DisableAllModes();
  DragDrop.Enabled = false;
}

bool ItemWasTakenFromGrayBox;
int MaxObjBaseline; // kinda hackish
function room_RepExec()
{
  if (IsKeyPressed(eKeySpace))
    DragDropCommon.DragMove = eDDCmnMoveGhostOverlay;
  else
    DragDropCommon.DragMove = eDDCmnMoveSelf;
      
  if (DragDrop.CurrentMode != eDragDropRoomObject)
    return; // not interested

  Object* obj = DragDropCommon._RoomObject;
  int o_w = DragDropCommon.ObjectWidth;
  int o_h = DragDropCommon.ObjectHeight;
  int o_x = DragDrop.ObjectX;
  // AGS object's Y coordinate is at the object's bottom, so convert it to top coordinate
  int o_y = DragDrop.ObjectY - o_h;

  if (DragDrop.EvtObjectHooked)
  {
    ItemWasTakenFromGrayBox = IsObjectOverRect(o_x, o_y, o_w, o_h, ColorRc[colGray].x, ColorRc[colGray].y, ColorRc[colGray].x2, ColorRc[colGray].y2);
    obj.Baseline = obj.Baseline + 1000 + MaxObjBaseline;
    MaxObjBaseline++;
  }
  else if (DragDrop.EvtWantDrop)
  {
    String color = obj.GetTextProperty("color");
    ObjectColor match = colGray;
    if (color.CompareTo("red") == 0)
      match = colRed;
    else if (color.CompareTo("yellow") == 0)
      match = colYellow;
    else if (color.CompareTo("blue") == 0)
      match = colBlue;
    else if (color.CompareTo("violet") == 0)
      match = colViolet;
      
    if (IsObjectOverRect(o_x, o_y, o_w, o_h, ColorRc[match].x, ColorRc[match].y, ColorRc[match].x2, ColorRc[match].y2) ||
        IsPointOverRect(mouse.x, mouse.y, ColorRc[match].x, ColorRc[match].y, ColorRc[match].x2, ColorRc[match].y2))
      SnapObjectToRect(o_x, o_y, o_w, o_h, ColorRc[match].x, ColorRc[match].y, ColorRc[match].x2, ColorRc[match].y2, true);
    else
    {
      if (IsObjectOverRect(o_x, o_y, o_w, o_h, ColorRc[colGray].x, ColorRc[colGray].y, ColorRc[colGray].x2, ColorRc[colGray].y2) ||
          IsPointOverRect(mouse.x, mouse.y, ColorRc[match].x, ColorRc[match].y, ColorRc[match].x2, ColorRc[match].y2) ||
          ItemWasTakenFromGrayBox)
        SnapObjectToRect(o_x, o_y, o_w, o_h, ColorRc[colGray].x, ColorRc[colGray].y, ColorRc[colGray].x2, ColorRc[colGray].y2, false);
      else
        DragDrop.Revert();
    }
  }
}
