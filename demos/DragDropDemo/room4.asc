// room script file

DynamicSprite* SprGUI1;
DynamicSprite* SprGUI2;

DynamicSprite* CreateInventoryBkg(GUI* g, InvWindow* wnd, int box_color, int in_color)
{
  DynamicSprite* spr = DynamicSprite.Create(g.Width, g.Height);
  DrawingSurface* ds = spr.GetDrawingSurface();
  ds.DrawingColor = in_color;
  ds.DrawRectangle(wnd.X, wnd.Y, wnd.X + wnd.Width - 1, wnd.Y + wnd.Height - 1);
  ds.DrawingColor = box_color;
  ds.DrawFrame(wnd.X - 1, wnd.Y - 1, wnd.X + wnd.Width, wnd.Y + wnd.Height);
  ds.Release();
  return spr;
}

function room_FirstLoad()
{
  cInvOwner1.AddInventory(iPencil);
  cInvOwner1.AddInventory(iScissors);
  cInvOwner2.AddInventory(iGlasses);
  cInvOwner2.AddInventory(iBlueCup);
  
  SprGUI1 = CreateInventoryBkg(gItemExchange1, InventoryWindow1, Game.GetColorFromRGB(128, 128, 128), Game.GetColorFromRGB(0, 0, 0));
  SprGUI2 = CreateInventoryBkg(gItemExchange2, InventoryWindow2, Game.GetColorFromRGB(128, 128, 128), Game.GetColorFromRGB(0, 0, 0));
  gItemExchange1.BackgroundGraphic = SprGUI1.Graphic;
  gItemExchange2.BackgroundGraphic = SprGUI2.Graphic;
}

function room_AfterFadeIn()
{
  gItemExchange1.Visible = true;
  gItemExchange2.Visible = true;
  
  RoomHelpText = "DEMO 4: Item Exchange[[Drag inventory items from one inventory window into another.";
  DisplayRoomHelp();
  
  DragDrop.Enabled = true;
  DragDropCommon.ModeEnabled[eDragDropInvItem] = true;
  DragDropCommon.DragMove = eDDCmnMoveGhostGUI;
  DragDropCommon.GhostGUI = gInvItemGhost;
  DragDropCommon.GhostTransparency = 50;
  DragDropCommon.GhostAlpha = false;
  DragDrop.DefaultHookKey = 0;
  DragDrop.DefaultHookMouseButton = eMouseLeft;
  DragDrop.DragMinDistance = 0;
  DragDrop.DragMinTime = 0;
  DragDrop.AutoTrackHookKey = true;
  DragDrop.DefaultUnhookAction = eDDUnhookRevert;
}

function room_Leave()
{
  gItemExchange1.Visible = false;
  gItemExchange2.Visible = false;
}

bool IsOverInvWindow(int o_x, int o_y, int o_w, int o_h, InvWindow *wnd)
{
  int r_x = wnd.OwningGUI.X + wnd.X;
  int r_y = wnd.OwningGUI.Y + wnd.Y;
  int r_x2 = wnd.OwningGUI.X + wnd.X + wnd.Width;
  int r_y2 = wnd.OwningGUI.Y + wnd.Y + wnd.Height;
  return IsObjectOverRect(o_x, o_y, o_w, o_h, r_x, r_y, r_x2, r_y2) ||
      IsPointOverRect(mouse.x, mouse.y, r_x, r_y, r_x2, r_y2);
}

InvWindow* GetInvWindowUnderObject(int o_x, int o_y, int o_w, int o_h)
{
  if (IsOverInvWindow(o_x, o_y, o_w, o_h, InventoryWindow1))
    return InventoryWindow1;
  else if (IsOverInvWindow(o_x, o_y, o_w, o_h, InventoryWindow2))
    return InventoryWindow2;
  return null;
}

InvWindow* ItemOrigin;
function room_RepExec()
{
  if (DragDrop.CurrentMode != eDragDropInvItem)
    return; // not interested
    
  int o_w = DragDropCommon.ObjectWidth;
  int o_h = DragDropCommon.ObjectHeight;
  int o_x = DragDrop.ObjectX;
  int o_y = DragDrop.ObjectY;
  
  if (DragDrop.EvtObjectHooked)
  {
    ItemOrigin = GetInvWindowUnderObject(o_x, o_y, o_w, o_h);
  }
  else if (DragDrop.EvtWantDrop)
  {
    InvWindow* drop_to = GetInvWindowUnderObject(o_x, o_y, o_w, o_h);
    if (drop_to != null && ItemOrigin != null && drop_to != ItemOrigin)
    {
      ItemOrigin.CharacterToUse.LoseInventory(DragDropCommon._InvItem);
      drop_to.CharacterToUse.AddInventory(DragDropCommon._InvItem);
    }
  }
}
