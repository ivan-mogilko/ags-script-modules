
#define footline_TYPEWRITER_PRESET 1

String footlines[];
int footline_count;
int footline_index;
int footline_tw;

function game_start()
{
  footline_count = 10;
  footlines = new String[footline_count];
  footlines[0] = "This is TypedText Demo Game. This game demonstrates typewriter style of printing text.[";
  footlines[1] = "Text may be printed on Buttons, Labels and Overlays. Printing could be done in a blocking and non-blocking way.[";
  footlines[2] = "For example, right now the text is printed in non-blocking way on the GUI Label.[";
  footlines[3] = "You may add sounds to the typed text too. There are three kinds of sounds supported at the moment: typing sound, caret return sound and ending sound.[";
  footlines[4] = "It is possible to have an array for typing sounds, in which case every next sound will be chosen at random.[";
  footlines[5] = "Have fun using the TypedText module![";
  footline_index = 0;
  footline_tw = NO_TYPEWRITER;
  
  lblFootline.TextColor = 10;
  lblFootline.Text = "";
  lblFootline.Font = eFontFont0;
  
  TypewriterPreset.SetGeneral(footline_TYPEWRITER_PRESET, 4, 8, eTypedDelay_Mixed, 15);
  TypewriterPreset.SetCaret(footline_TYPEWRITER_PRESET, 4, 4, eTypedCaret_Explicit, "_");
  AudioClip *type_clips[] = new AudioClip[3];
  type_clips[0] = aKeyboard;
  type_clips[1] = aKeyboard2;
  type_clips[2] = aKeyboard3;
  TypewriterPreset.SetSoundArray(footline_TYPEWRITER_PRESET, type_clips, 3, null, aKeyboard_beep);
}

void NextFootline()
{
  if (footline_tw != NO_TYPEWRITER)
    TypewriterRunners.Cancel(footline_tw);
}

function repeatedly_execute()
{
  if (footline_tw != NO_TYPEWRITER)
  {
    if (!TypewriterRunners.IsActive[footline_tw])
      footline_tw = NO_TYPEWRITER;
  }
  if (footline_tw == NO_TYPEWRITER)
  {
    footline_tw = lblFootline.Typewriter(footlines[footline_index], eNoBlock, footline_TYPEWRITER_PRESET);
    footline_index++;
    if (footline_index == footline_count || footlines[footline_index] == null)
      footline_index = 0;
  }
}
