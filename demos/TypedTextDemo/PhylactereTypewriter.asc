/////////////////////////////////////////////////////////////////////////////
//
// Phylactere drawing functions.
//
/////////////////////////////////////////////////////////////////////////////

#ifndef Phylactere_VERSION
Phylactere_Param phylactere;
export phylactere;

function game_start() {
  /* ------------- PARAMETRAGE --------------- */
  phylactere.background_color = 15;
  phylactere.outline_color = 0;
  /* ------------------------------------------ */
}
#endif // !Phylactere_VERSION

//===========================================================================
//
// DrawPhylactere()
//
// Draws speech bubble using Phylactere settings.
// Drawing algorithm is copied from Phylactere module version 2.33,
// original copyright (C) 2009  Asraroth.
//
//===========================================================================
void DrawPhylactere(DrawingSurface *ds, int at_x, int at_y, int bubble_width, int bubble_height,
                    int dir_loop, PhylactereQueueMode mode)
{
  String GQueue[20]; // Dessin de la Queue (X = Contour, O = Fond)
  int queue_height = 0;
 
  if (mode == ePhylactereTalking) {
    GQueue[01] = "OOOOOOOO";
    GQueue[02] = "XOOOOOXX";
    GQueue[03] = "XOOOOX  ";
    GQueue[04] = "XOOOOX  ";
    GQueue[05] = " XOOOX  ";
    GQueue[06] = " XOOOX  ";
    GQueue[07] = "  XOOOX ";
    GQueue[08] = "   XOOOX";
    GQueue[09] = "    XXX ";
    queue_height = 9;
  }

  if (mode == ePhylactereThinking) {
    GQueue[01] = "        ";
    GQueue[02] = "        ";
    GQueue[03] = "  XX    ";
    GQueue[04] = " XOOX   ";
    GQueue[05] = "XOOOOX  ";
    GQueue[06] = "XOOOOX  ";
    GQueue[07] = " XOOX   ";
    GQueue[08] = "  XX    ";
    GQueue[09] = "        ";
    GQueue[10] = "    XX  ";
    GQueue[11] = "   XOOX ";
    GQueue[12] = "   XOOX ";
    GQueue[13] = "    XX  ";
    queue_height = 13;
  }
  
  // Calcul positions de la bulle
  int bulle_x1 = at_x;
  int bulle_y1 = at_y;
  int bulle_x2 = at_x + bubble_width;
  int bulle_y2 = at_y + bubble_height;
  
  // ---- Bulle ----
  
    ds.DrawingColor = phylactere.background_color;
    ds.DrawRectangle(bulle_x1 , bulle_y1 ,  bulle_x2 ,  bulle_y2);
    ds.DrawLine(bulle_x1 - 1, bulle_y1 + 1 ,  bulle_x1 - 1 ,  bulle_y2 - 1);
    ds.DrawLine(bulle_x2 + 1, bulle_y1 + 1 ,  bulle_x2 + 1 ,  bulle_y2 - 1);
    ds.DrawLine(bulle_x1 + 1 ,  bulle_y1 - 1 ,  bulle_x2 - 1 ,  bulle_y1 - 1);
    ds.DrawLine(bulle_x1 + 1 ,  bulle_y2 + 1 ,  bulle_x2 - 1 ,  bulle_y2 + 1);
    ds.DrawLine(bulle_x1 - 2, bulle_y1 + 3 ,  bulle_x1 - 2 ,  bulle_y2 - 3);
    ds.DrawLine(bulle_x2 + 2, bulle_y1 + 3 ,  bulle_x2 + 2 ,  bulle_y2 - 3);
    ds.DrawLine(bulle_x1 + 3 ,  bulle_y1 - 2 ,  bulle_x2 - 3 ,  bulle_y1 - 2);
    ds.DrawLine(bulle_x1 + 3 ,  bulle_y2 + 2 ,  bulle_x2 - 3 ,  bulle_y2 + 2);
  

  // ---- Contours ----
  ds.DrawingColor = phylactere.outline_color;
  ds.DrawLine(bulle_x1 - 3, bulle_y1 + 3 ,  bulle_x1 - 3 ,  bulle_y2 - 3);
  ds.DrawLine(bulle_x2 + 3, bulle_y1 + 3 ,  bulle_x2 + 3 ,  bulle_y2 - 3);
  ds.DrawLine(bulle_x1 + 3 ,  bulle_y1 - 3 ,  bulle_x2 - 3 ,  bulle_y1 - 3);
  ds.DrawLine(bulle_x1 + 3 ,  bulle_y2 + 3 ,  bulle_x2 - 3 ,  bulle_y2 + 3);
  
  //---- Angle supérieur gauche ----
  ds.DrawPixel(bulle_x1 - 2 , bulle_y1 + 2);
  ds.DrawPixel(bulle_x1 - 2 , bulle_y1 + 1);
  ds.DrawPixel(bulle_x1 - 1 , bulle_y1);
  ds.DrawPixel(bulle_x1 , bulle_y1 - 1);
  ds.DrawPixel(bulle_x1 + 1 , bulle_y1 - 2);
  ds.DrawPixel(bulle_x1 + 2 , bulle_y1 - 2);

  //---- Angle supérieur droit ----
  ds.DrawPixel(bulle_x2 + 2 , bulle_y1 + 2);
  ds.DrawPixel(bulle_x2 + 2 , bulle_y1 + 1);
  ds.DrawPixel(bulle_x2 + 1 , bulle_y1);
  ds.DrawPixel(bulle_x2 , bulle_y1 - 1);
  ds.DrawPixel(bulle_x2 - 1 , bulle_y1 - 2);
  ds.DrawPixel(bulle_x2 - 2 , bulle_y1 - 2);

  //---- Angle inférieur gauche ----
  ds.DrawPixel(bulle_x1 - 2 , bulle_y2 - 2);
  ds.DrawPixel(bulle_x1 - 2 , bulle_y2 - 1);
  ds.DrawPixel(bulle_x1 - 1 , bulle_y2);
  ds.DrawPixel(bulle_x1 , bulle_y2 + 1);
  ds.DrawPixel(bulle_x1 + 1 , bulle_y2 + 2);
  ds.DrawPixel(bulle_x1 + 2 , bulle_y2 + 2);

  //---- Angle inférieur droit ----
  ds.DrawPixel(bulle_x2 + 2 , bulle_y2 - 2);
  ds.DrawPixel(bulle_x2 + 2 , bulle_y2 - 1);
  ds.DrawPixel(bulle_x2 + 1 , bulle_y2);
  ds.DrawPixel(bulle_x2 , bulle_y2 + 1);
  ds.DrawPixel(bulle_x2 - 1 , bulle_y2 + 2);
  ds.DrawPixel(bulle_x2 - 2 , bulle_y2 + 2);
  
  // ---- Queue ----
  int char_dir = dir_loop; // 0=bas , 1=gauche, 2=droite, 3=haut
  int qy = bulle_y2 + 3;
  int qx;
  if ((char_dir == 1) || (char_dir == 0)) {
    qx = at_x - 10 + bubble_width / 2;
  } else {
    qx = at_x + 10 - GQueue[1].Length + bubble_width / 2;
  }
  int j = 1;
  while (j <= queue_height) {
    int i = 0; 
    while (i < GQueue[j].Length) {
      bool visible = false;
      if (GQueue[j].Chars[i] == 'X') {
        ds.DrawingColor = phylactere.outline_color;
        visible = true;
      }
      if (GQueue[j].Chars[i] == 'O') {
        
          ds.DrawingColor = phylactere.background_color;
        
        visible = true;
      }
      if (visible) {
        if ((char_dir == 1) || (char_dir == 0)) {
          ds.DrawPixel(qx + i ,  qy + j - 1);
        } else {
          ds.DrawPixel(qx + GQueue[j].Length - i ,  qy + j - 1);
        }
      }
      i++; 
    }
    j++;
  }
}


/////////////////////////////////////////////////////////////////////////////
//
// Custom typewriter printed on the speech bubble overlay.
//
/////////////////////////////////////////////////////////////////////////////

DynamicSprite *bubble_spr;
Overlay *bubble_over;
Character *phylactere_char;
TypewriterOverlay phylactere_tw;

//===========================================================================
//
// SetupPhylactereTypewriter()
//
//===========================================================================
void SetupPhylactereTypewriter(Character* ch, String text, int delay)
{
  phylactere_char = ch;
  
  int max_width = System.ViewportWidth / 3;
  int max_height = System.ViewportHeight / 6;
  int min_pos = 16;
  int max_pos = System.ViewportWidth - 16;
  
  FontType font = Game.SpeechFont;
  int text_width = GetTextWidth(text, font);
  // counter default display padding and mistake in built-in line splitting condition,
  // trying to match AGS behavior on line splitting.
  text_width = text_width + DEFAULT_DISPLAY_PADDING + INTERNAL_LINE_SPLIT_MISTAKE;
  if (text_width > max_width)
    text_width = max_width;
  int text_height = GetTextHeight(text, font, text_width - (DEFAULT_DISPLAY_PADDING + INTERNAL_LINE_SPLIT_MISTAKE) + 1);
  text_height = text_height + DEFAULT_DISPLAY_PADDING; // counter built-in overlay padding
  if (text_height > max_height)
    text_height = max_height;
  
  int bubble_width = text_width + 10;
  int bubble_height = text_height + 8;
  int bubble_margin = 3;
  int bubble_thingie = 13;
  int over_width = bubble_width + bubble_margin * 2 + 1;
  int over_height = bubble_height + bubble_margin * 2 + 1 + bubble_thingie;
  
  ViewFrame *vf = Game.GetViewFrame(ch.View, ch.Loop, ch.Frame);
  int scaling;
  if (ch.ManualScaling)
    scaling = ch.Scaling;
  else
    scaling = GetScalingAt(ch.x, ch.y);
  int char_x = ch.x + (scaling * Game.SpriteWidth[vf.Graphic] / 100) / 2;
  int char_top = ch.y - (scaling * Game.SpriteHeight[vf.Graphic] / 100);
  int over_x = char_x - over_width / 2;
  int over_y = char_top - over_height;
  int bubble_dir = phylactere_char.Loop;
  //Display("char_x = %d, over_x = %d", char_x, over_x);
  if (over_x + over_width > max_pos)
  {
    over_x = max_pos - over_width;
    if (char_x > (over_x + over_width / 2))
      bubble_dir = 1;
  }
  if (over_x < min_pos)
  {
    over_x = min_pos;
    //Display("char_x = %d, over_x = %d[(over_x + over_width / 2) = %d", char_x, over_x, (over_x + over_width / 2));
    if (char_x < (over_x + over_width / 2))
      bubble_dir = 2;
  }
  
  int bubble_x = bubble_margin;
  int bubble_y = bubble_margin;
  bubble_spr = DynamicSprite.Create(over_width, over_height);
  DrawingSurface *ds = bubble_spr.GetDrawingSurface();
  DrawPhylactere(ds, bubble_x, bubble_y, bubble_width, bubble_height, bubble_dir, ePhylactereTalking);
  ds.Release();
  
  bubble_over = Overlay.CreateGraphical(over_x, over_y, bubble_spr.Graphic, false);
  
  int text_x = over_x + (over_width - text_width) / 2 + 1;
  int text_y = over_y + bubble_y + (bubble_height - text_height) / 2 - 1;
  
  /*
  String s = String.Format("over: %d - %d (%d) ", over_y, over_y + over_height - 1, over_height);
  s = s.Append(String.Format("bubble: %d - %d (%d) ", over_y + bubble_y, over_y + bubble_y + bubble_height - 1, bubble_height));
  s = s.Append(String.Format("text: %d - %d (%d)", text_y, text_y + text_height - 1, text_height));
  Display("%s", s);
  */
  
  phylactere_tw.X = text_x;
  phylactere_tw.Y = text_y;
  phylactere_tw.Width = text_width;
  phylactere_tw.Font = font;
  phylactere_tw.Color = phylactere_char.SpeechColor;
  phylactere_tw.TypeDelay = delay;
  phylactere_tw.TypeDelayStyle = eTypedDelay_Uniform;
  phylactere_tw.TextReadTime = GetGameSpeed() / Game.TextReadingSpeed + 1;
  phylactere_tw.Start(text);
  //Display("%s",phylactere_tw.FullString);
  
  phylactere_char.LockView(phylactere_char.SpeechView);
  phylactere_char.Animate(phylactere_char.Loop, phylactere_char.SpeechAnimationDelay, eRepeat, eNoBlock);
}

//===========================================================================
//
// UpdatePhylactereTypewriter()
//
//===========================================================================
void UpdatePhylactereTypewriter()
{
  phylactere_tw.Tick();
}

//===========================================================================
//
// CleanUpPhylactereTypewriter()
//
//===========================================================================
void CleanUpPhylactereTypewriter()
{
  if (phylactere_char)
    phylactere_char.UnlockView();
  phylactere_tw.Clear();
  if (bubble_over != null && bubble_over.Valid)
    bubble_over.Remove();
  if (bubble_spr != null)
    bubble_spr.Delete();
}

//===========================================================================
//
// PhylactereTypewriter()
//
//===========================================================================
void PhylactereTypewriter(this Character*, String text, BlockingStyle bs, int delay)
{
  SetupPhylactereTypewriter(this, text, delay);
  
  if (bs == eBlock)
  {
    int interrupted;
    while (!phylactere_tw.IsIdle && interrupted == 0)
    {
      UpdatePhylactereTypewriter();
      interrupted = WaitMouseKey(1);
    }
    CleanUpPhylactereTypewriter();
  }
}

//===========================================================================
//
// IsPhylactereStillTyping()
//
//===========================================================================
bool IsPhylactereStillTyping()
{
  return !phylactere_tw.IsIdle;
}

//===========================================================================
//
// IsPhylactereStillTyping()
//
//===========================================================================
void InterruptPhylactereTypewriter()
{
  CleanUpPhylactereTypewriter();
}

function repeatedly_execute()
{
  if (phylactere_tw.IsActive)
  {
    if (phylactere_tw.IsIdle)
      CleanUpPhylactereTypewriter();
    else
    {
      UpdatePhylactereTypewriter();
    }
  }
}

