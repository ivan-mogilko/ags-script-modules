/////////////////////////////////////////////////////////////////////////////
//
// TypedTextUtils class
//
/////////////////////////////////////////////////////////////////////////////
// Internal data container
struct TypedTextUtilsImpl
{
  String MetricsTestString;
  String SplitHintCharacters;
};
TypedTextUtilsImpl TTUtils;

//===========================================================================
//
// TypedTextUtils::SplitHintCharacters property
//
//===========================================================================
String get_SplitHintCharacters(this TypedTextUtils*)
{
  return TTUtils.SplitHintCharacters;
}

void set_SplitHintCharacters(this TypedTextUtils*, String value)
{
  TTUtils.SplitHintCharacters = value;
}

//===========================================================================
//
// TypedTextUtils::GetFontHeight property
//
//===========================================================================
static int TypedTextUtils::GetFontHeight(FontType font)
{
  return GetTextHeight(TTUtils.MetricsTestString, font, 1000);
}

//===========================================================================
//
// TypedTextUtils::SplitText
//
// Splits the long text into lines, that fit into bounding rectangle, by
// inserting AGS line break ('[') into them. This will help detect end of
// lines for both built-in classes, like Labels, and custom renderers.
//
//===========================================================================
#define LINE_BREAK '['
static String TypedTextUtils::SplitText(String text, int max_width, FontType font, int max_height, int line_height, int max_lines)
{
  //Display("TypedTextUtils::SplitText: %s", text);
  if (String.IsNullOrEmpty(text))
    return text;

  if (max_width <= 0)
    return "";

  if (max_height != SCR_NO_VALUE || max_lines != SCR_NO_VALUE)
  {
    if (line_height == SCR_NO_VALUE)
      line_height = TypedTextUtils.GetFontHeight(font);

    if (max_lines == SCR_NO_VALUE)
      max_lines = max_height / line_height;
    else if (max_height == SCR_NO_VALUE)
      max_height = max_lines * line_height;
    else
    {
      int real_max_lines = max_height / line_height;
      if (real_max_lines < max_lines)
        max_lines = real_max_lines;
    }
  }
  
  String split_text = "";
  int line_count = 0;            // number of lines
  int line_start = 0;            // first character in line
  
  // Text parsing & splitting loop
  while ((max_lines == SCR_NO_VALUE || line_count < max_lines) && line_start < text.Length)
  {
    int  line_end = line_start;  // first character beyond parsed line 
    int  line_width = 0;         // width of the current line
    int  last_break_index = -1;  // last found character that may serve as linebreak;
    bool line_break = false;     // if actual line breaker was met
    
    // Searching for a point of breaking the line
    while (!line_break && line_end < text.Length && line_width <= max_width)
    {
      String cur_char = text.Substring(line_end, 1); // current character
      if (cur_char.Chars[0] == LINE_BREAK)
      {
        line_break = true; // found the actual linebreak character, break immediately
      }
      else
      {
        // Measure the current line length
        line_width = GetTextWidth(text.Substring(line_start, line_end - line_start), font);
        if (line_width <= max_width)
        {
          // If line width still fits into the width, check for any character that can be
          // used as a breaking one, and remember it for the future.
          if (TTUtils.SplitHintCharacters.IndexOf(cur_char) >= 0)
          {
            last_break_index = line_end;
          }
          line_end++;
        }
      }
    }
    
    // Move line end to just beyond the last found breakchar, if any
    if (last_break_index >= line_start)
      line_end = last_break_index + 1;

    if (split_text.Length > 0)
      split_text = split_text.AppendChar(LINE_BREAK);
    String s = text.Substring(line_start, line_end - line_start);
    //Display("TypedTextUtils::SplitText: appended %s", s);
    split_text = split_text.Append(s);
    
    line_count++;
    line_start = line_end;
    if (line_break)
      line_start++; // skip break char, if there was one
    line_end = line_start;
  }
  // Return the final string
  //Display("TypedTextUtils::SplitText: return %s", split_text);
  return split_text;
}


/////////////////////////////////////////////////////////////////////////////
//
// TypedText class
//
/////////////////////////////////////////////////////////////////////////////

//===========================================================================
//
// TypedText::_Clear()
//
//===========================================================================
protected void TypedText::_Clear()
{
  this._full = "";
  this._cur = "";
  this._last = "";
  this._paused = false;
  this._typeTimer = 0;
  this._caretFlashTimer = 0;
  this._readerTimer = 0;
  this._justTyped = false;
  this._hasChanged = true;
}

//===========================================================================
//
// TypedText::Clear()
//
//===========================================================================
void TypedText::Clear()
{
  this._Clear();
}

//===========================================================================
//
// TypedText::GetDelayForChar()
//
// Returns delay (in ticks) after the given character.
//
//===========================================================================
int GetDelayForChar(this TypedText*, char c)
{
  int delay = Random(this._typeDelayMax - this._typeDelayMin) + this._typeDelayMin;
  if (c == ' ')
  {
    if (this._typeDelayStyle == eTypedDelay_LongSpace)
      delay = delay * 2;
    else if (this._typeDelayStyle == eTypedDelay_ShortSpace)
      delay = delay / 2;
    else if (this._typeDelayStyle == eTypedDelay_Mixed)
    {
      int r = Random(2);
      if (r == 0)
        delay = delay * 2;
      else if (r == 1)
        delay = delay / 2;
    }
  }
  else if (c == LINE_BREAK)
  {
    if (this._typeDelayStyle == eTypedDelay_LongSpace)
      delay = delay * 4;
    else if (this._typeDelayStyle == eTypedDelay_ShortSpace ||
             this._typeDelayStyle == eTypedDelay_Uniform)
      delay = delay * 2;
    else if (this._typeDelayStyle == eTypedDelay_Mixed)
    {
      int r = Random(2);
      if (r == 0)
        delay = delay * 4;
    }
  }
  return delay;
}

//===========================================================================
//
// TypedText::BeginTyping()
// Sets up TypingText to continue typing.
//
//===========================================================================
void BeginTyping(this TypedText*)
{
  this._typeTimer = this.GetDelayForChar(0);
  this._caretFlashTimer = this._caretOffTime + this._caretOnTime;
  this._readerTimer = this._full.Length * this._textReadTime;
  this._justTyped = false;
  this._paused = false;
}

//===========================================================================
//
// TypedText::PauseTyping()
// Sets up TypingText to pause typing.
//
//===========================================================================
void PauseTyping(this TypedText*)
{
  this._paused = true;
}

//===========================================================================
//
// TypedText::_Start()
//
//===========================================================================
protected void TypedText::_Start(String text)
{
  this.Clear();
  this._full = text;
  this._hasChanged = true;
  this.BeginTyping(); // reset typing iterator and timers
}

//===========================================================================
//
// TypedText::Start()
//
//===========================================================================
void TypedText::Start(String text)
{
  this._Start(text);
}

//===========================================================================
//
// TypedText::Skip()
//
//===========================================================================
void TypedText::Skip()
{
  this._cur = this._full;
  this._justTyped = false;
  this._hasChanged = true;
}

//===========================================================================
//
// TypedText::_Tick()
//
//===========================================================================
protected void TypedText::_Tick()
{
  // Reset one-tick events
  bool had_just_typed = this._justTyped;
  this._justTyped = false;
  this._justFinishedTyping = false;
  
  if (String.IsNullOrEmpty(this._full))
    return; // nothing to update

  if (this._paused)
    return; // paused, don't do anything

  // Update reader timer
  if (this._readerTimer > 0)
    this._readerTimer--;

  // Update text's state
  if (this._cur.Length < this._full.Length)
  {
    if (this._typeTimer <= 0)
    {
      // Type next part of the string
      char c = this._full.Chars[this._cur.Length];
      this._last = String.Format("%c", c);
      this._cur = this._cur.Append(this._last);
      // Signal that we just appended text
      this._justTyped = true;
        
      if (this._cur.Length < this._full.Length)
      {
        // Set up type timer
        this._typeTimer = this.GetDelayForChar(c);
      }
      
      // Reset flashing timer
      this._caretFlashTimer = this._caretOffTime + this._caretOnTime;
      this._hasChanged = true;
      return;
    }
    else
    {
      // Advance type timer
      this._typeTimer--;
    }
  }
  else if (had_just_typed)
  {
    // Rise just ended event
    this._justFinishedTyping = true;
  }
  
  // If no typing was done recently, do caret flashing
  if (this._caretFlashTimer <= 0)
    this._caretFlashTimer = this._caretOffTime + this._caretOnTime;
  else
    this._caretFlashTimer--;
  this._hasChanged = true;
}

//===========================================================================
//
// TypedText::Tick()
//
//===========================================================================
void TypedText::Tick()
{
  this._Tick();
}

//===========================================================================
//
// TypedText::TypeDelay property
//
//===========================================================================
int get_TypeDelay(this TypedText*)
{
  if (this._typeDelayMin == this._typeDelayMax)
    return this._typeDelayMin;
  return -1;
}

void set_TypeDelay(this TypedText*, int value)
{
  this._typeDelayMin = value;
  this._typeDelayMax = value;
}

//===========================================================================
//
// TypedText::TypeDelayMin property
//
//===========================================================================
int get_TypeDelayMin(this TypedText*)
{
  return this._typeDelayMin;
}

void set_TypeDelayMin(this TypedText*, int value)
{
  this._typeDelayMin = value;
  if (this._typeDelayMin > this._typeDelayMax)
  {
    this._typeDelayMax = value;
    this._typeDelayMin = this._typeDelayMax;
  }
}

//===========================================================================
//
// TypedText::TypeDelayMax property
//
//===========================================================================
int get_TypeDelayMax(this TypedText*)
{
  return this._typeDelayMin;
}

void set_TypeDelayMax(this TypedText*, int value)
{
  this._typeDelayMax = value;
  if (this._typeDelayMax < this._typeDelayMin)
  {
    this._typeDelayMin = value;
    this._typeDelayMax = this._typeDelayMin;
  }
}

//===========================================================================
//
// TypedText::TypeDelayStyle property
//
//===========================================================================
TypedDelayStyle get_TypeDelayStyle(this TypedText*)
{
  return this._typeDelayStyle;
}

void set_TypeDelayStyle(this TypedText*, TypedDelayStyle value)
{
  if (value < eTypedDelay_Uniform || value > eTypedDelay_Mixed)
    AbortGame("Unknown delay style ID = %d", value);
  this._typeDelayStyle = value;
}

//===========================================================================
//
// TypedText::CaretFlashOnTime property
//
//===========================================================================
int get_CaretFlashOnTime(this TypedText*)
{
  return this._caretOnTime;
}

void set_CaretFlashOnTime(this TypedText*, int value)
{
  this._caretOnTime = value;
}

//===========================================================================
//
// TypedText::CaretFlashOffTime property
//
//===========================================================================
int get_CaretFlashOffTime(this TypedText*)
{
  return this._caretOffTime;
}

void set_CaretFlashOffTime(this TypedText*, int value)
{
  this._caretOffTime = value;
}

//===========================================================================
//
// TypedText::TextReadTime property
//
//===========================================================================
int get_TextReadTime(this TypedText*)
{
  return this._textReadTime;
}

void set_TextReadTime(this TypedText*, int value)
{
  this._textReadTime = value;
}

//===========================================================================
//
// TypedText::EvtCharTyped property
//
//===========================================================================
bool get_EvtCharTyped(this TypedText*)
{
  return this._justTyped;
}

//===========================================================================
//
// TypedText::EvtFinishedTyping property
//
//===========================================================================
bool get_EvtFinishedTyping(this TypedText*)
{
  return this._justFinishedTyping;
}

//===========================================================================
//
// TypedText::FullString property
//
//===========================================================================
String get_FullString(this TypedText*)
{
  return this._full;
}
  
//===========================================================================
//
// TypedText::CurrentString property
//
//===========================================================================
String get_CurrentString(this TypedText*)
{
  return this._cur;
}
  
//===========================================================================
//
// TypedText::LastTyped property
//
//===========================================================================
String get_LastTyped(this TypedText*)
{
  return this._last;
}

//===========================================================================
//
// TypedText::IsActive property
//
//===========================================================================
bool get_IsActive(this TypedText*)
{
  return !String.IsNullOrEmpty(this._full);
}
  
//===========================================================================
//
// TypedText::IsTextBeingTyped property
//
//===========================================================================
bool get_IsTextBeingTyped(this TypedText*)
{
  return !String.IsNullOrEmpty(this._full) && (this._cur.Length < this._full.Length);
}

//===========================================================================
//
// TypedText::IsWaitingForReader property
//
//===========================================================================
bool get_IsWaitingForReader(this TypedText*)
{
  return this._readerTimer > 0;
}

//===========================================================================
//
// TypedText::IsIdle property
//
//===========================================================================
bool get_IsIdle(this TypedText*)
{
  return !this.get_IsWaitingForReader() && !this.get_IsTextBeingTyped();
}

//===========================================================================
//
// TypedText::IsCaretShown property
//
//===========================================================================
bool get_IsCaretShown(this TypedText*)
{
  return this._caretFlashTimer > this._caretOffTime;
}

//===========================================================================
//
// TypedText::Paused property
//
//===========================================================================
bool get_Paused(this TypedText*)
{
  return this._paused;
}

void set_Paused(this TypedText*, int value)
{
  if (this._paused != value)
  {
    if (value)
      this.BeginTyping();
    else
      this.PauseTyping();
  }
}


/////////////////////////////////////////////////////////////////////////////
//
// TypewriterRender class
//
/////////////////////////////////////////////////////////////////////////////

//===========================================================================
//
// TypewriterRender::GetStringWithCaret()
//
//===========================================================================
String TypewriterRender::GetStringWithCaret()
{
  if (this._caretStyle == eTypedCaret_LastChar)
  {
    if (!this.get_IsCaretShown())
      return this._cur.Truncate(this._cur.Length - this._last.Length);
  }
  else if (this._caretStyle == eTypedCaret_Explicit)
  {
    if (!String.IsNullOrEmpty(this._caretStr) && this.get_IsCaretShown())
      return this._cur.Append(this._caretStr);
  }
  return this._cur;
}

//===========================================================================
//
// TypewriterRender::CaretStyle property
//
//===========================================================================
TypedCaretStyle get_CaretStyle(this TypewriterRender*)
{
  return this._caretStyle;
}

void set_CaretStyle(this TypewriterRender*, TypedCaretStyle value)
{
  this._caretStyle = value;
}

//===========================================================================
//
// TypewriterRender::CaretString property
//
//===========================================================================
String get_CaretString(this TypewriterRender*)
{
  return this._caretStr;
}

void set_CaretString(this TypewriterRender*, String value)
{
  this._caretStr = value;
}

//===========================================================================
//
// TypewriterRender::TypeSound property
//
//===========================================================================
AudioClip* get_TypeSound(this TypewriterRender*)
{
  if (this._typeSoundCount > 0)
    return this._typeSound[0];
  return null;
}

void set_TypeSound(this TypewriterRender*, AudioClip *value)
{
  this._typeSoundCount = 1;
  this._typeSound[0] = value;
}

//===========================================================================
//
// TypewriterRender::TypeSounds[] property
//
//===========================================================================
AudioClip* geti_TypeSounds(this TypewriterRender*, int index)
{
  if (index < 0 || index >= TYPEDTEXTRENDER_MAXSOUNDS)
    return null;
  return this._typeSound[index];
}

//===========================================================================
//
// TypewriterRender::TypeSoundCount property
//
//===========================================================================
int get_TypeSoundCount(this TypewriterRender*)
{
  return this._typeSoundCount;
}

//===========================================================================
//
// TypewriterRender::CaretSound property
//
//===========================================================================
AudioClip* get_CaretSound(this TypewriterRender*)
{
  return this._caretSound;
}

void set_CaretSound(this TypewriterRender*, AudioClip *value)
{
  this._caretSound = value;
}

//===========================================================================
//
// TypewriterRender::EndSound property
//
//===========================================================================
AudioClip* get_EndSound(this TypewriterRender*)
{
  return this._endSound;
}

void set_EndSound(this TypewriterRender*, AudioClip *value)
{
  this._endSound = value;
}

//===========================================================================
//
// TypewriterRender::SetRandomTypeSounds()
//
//===========================================================================
void TypewriterRender::SetRandomTypeSounds(AudioClip *sounds[], int count)
{
  if (count > TYPEDTEXTRENDER_MAXSOUNDS)
    count = TYPEDTEXTRENDER_MAXSOUNDS;

  this._typeSoundCount = count;

  int i = 0;
  while (i < count)
  {
    this._typeSound[i] = sounds[i];
    i++;
  }
}

//===========================================================================
//
// TypewriterRender::_RenderClear()
//
//===========================================================================
protected void TypewriterRender::_RenderClear()
{
  this._Clear();
}

//===========================================================================
//
// TypewriterRender::_RenderStart()
//
//===========================================================================
protected void TypewriterRender::_RenderStart(String text)
{
  this._Start(text);
}

//===========================================================================
//
// TypewriterRender::_RenderTick()
//
//===========================================================================
protected void TypewriterRender::_RenderTick()
{
  this._Tick();
  if (this._justTyped)
  {
    if (this._last.Chars[0] == LINE_BREAK)
    {
      if (this._caretSound != null)
        this._caretSound.Play();
    }    
    else if (this._typeSoundCount > 0)
      this._typeSound[Random(this._typeSoundCount - 1)].Play();
  }
  else if (this._justFinishedTyping)
  {
    if (this._endSound != null)
      this._endSound.Play();
  }
}

//===========================================================================
//
// TypewriterRender::Clear()
//
//===========================================================================
void Clear(this TypewriterRender*)
{
  this._RenderClear();
}

//===========================================================================
//
// TypewriterRender::Start()
//
//===========================================================================
void Start(this TypewriterRender*, String text)
{
  this._RenderStart(text);
}

//===========================================================================
//
// TypewriterRender::Tick()
//
//===========================================================================
void Tick(this TypewriterRender*)
{
  this._RenderTick();
}


/////////////////////////////////////////////////////////////////////////////
//
// TypewriterButton class
//
/////////////////////////////////////////////////////////////////////////////

//===========================================================================
//
// TypewriterButton::TypeOnButton property
//
//===========================================================================
Button *get_TypeOnButton(this TypewriterButton*)
{
  return this._button;
}

void set_TypeOnButton(this TypewriterButton*, Button *value)
{
  this._button = value;
}

//===========================================================================
//
// TypewriterButton::Clear()
//
//===========================================================================
void Clear(this TypewriterButton*)
{
  this._RenderClear();
  this._button.Text = "";
}

//===========================================================================
//
// TypewriterButton::Start()
//
//===========================================================================
void Start(this TypewriterButton*, String text)
{
  this._RenderStart(TypedTextUtils.SplitText(text, this._button.Width - GetTextWidth("W", this._button.Font),
                                             this._button.Font, SCR_NO_VALUE, SCR_NO_VALUE, 1));
}

//===========================================================================
//
// TypewriterButton::Tick()
//
//===========================================================================
void Tick(this TypewriterButton*)
{
  this._RenderTick();
  if (this._hasChanged)
  {
    String cur = this.GetStringWithCaret();
    // NOTE: Button can only hold 50 characters
    this._button.Text = cur.Substring(0, 49);
    this._hasChanged = false;
  }
}


/////////////////////////////////////////////////////////////////////////////
//
// TypewriterLabel class
//
/////////////////////////////////////////////////////////////////////////////

//===========================================================================
//
// TypewriterLabel::TypeOnLabel property
//
//===========================================================================
Label *get_TypeOnLabel(this TypewriterLabel*)
{
  return this._label;
}

void set_TypeOnLabel(this TypewriterLabel*, Label *value)
{
  this._label = value;
}

//===========================================================================
//
// TypewriterLabel::Clear()
//
//===========================================================================
void Clear(this TypewriterLabel*)
{
  this._RenderClear();
  this._label.Text = "";
}

//===========================================================================
//
// TypewriterLabel::Start()
//
//===========================================================================
void Start(this TypewriterLabel*, String text)
{
  this._RenderStart(TypedTextUtils.SplitText(text, this._label.Width - GetTextWidth("W", this._label.Font),
                                             this._label.Font, this._label.Height, SCR_NO_VALUE, SCR_NO_VALUE));
}

//===========================================================================
//
// TypewriterLabel::Tick()
//
//===========================================================================
void Tick(this TypewriterLabel*)
{
  this._RenderTick();
  if (this._hasChanged)
  {
    this._label.Text = this.GetStringWithCaret();
    this._hasChanged = false;
  }
}


/////////////////////////////////////////////////////////////////////////////
//
// TypewriterOverlay class
//
/////////////////////////////////////////////////////////////////////////////

//===========================================================================
//
// TypewriterOverlay::X property
//
//===========================================================================
int get_X(this TypewriterOverlay*)
{
  return this._x;
}

void set_X(this TypewriterOverlay*, int value)
{
  this._x = value;
  if (this._o != null && this._o.Valid)
    this._o.X = value;
}

//===========================================================================
//
// TypewriterOverlay::Y property
//
//===========================================================================
int get_Y(this TypewriterOverlay*)
{
  return this._y;
}

void set_Y(this TypewriterOverlay*, int value)
{
  this._y = value;
  if (this._o != null && this._o.Valid)
    this._o.Y = value;
}

//===========================================================================
//
// TypewriterOverlay::Width property
//
//===========================================================================
int get_Width(this TypewriterOverlay*)
{
  return this._width;
}

void set_Width(this TypewriterOverlay*, int value)
{
  this._width = value;
  if (this._o != null && this._o.Valid)
    this._o.SetText(this._width, this._font, this._color, this.GetStringWithCaret());
}

//===========================================================================
//
// TypewriterOverlay::Font property
//
//===========================================================================
FontType get_Font(this TypewriterOverlay*)
{
  return this._font;
}

void set_Font(this TypewriterOverlay*, FontType value)
{
  this._font = value;
  if (this._o != null && this._o.Valid)
    this._o.SetText(this._width, this._font, this._color, this.GetStringWithCaret());
}

//===========================================================================
//
// TypewriterOverlay::Color property
//
//===========================================================================
int get_Color(this TypewriterOverlay*)
{
  return this._color;
}

void set_Color(this TypewriterOverlay*, int value)
{
  this._color = value;
  if (this._o != null && this._o.Valid)
    this._o.SetText(this._width, this._font, this._color, this.GetStringWithCaret());
}

//===========================================================================
//
// TypewriterOverlay::OwnedOverlay property
//
//===========================================================================
Overlay *get_OwnedOverlay(this TypewriterOverlay*)
{
  return this._o;
}

//===========================================================================
//
// TypewriterOverlay::Clear()
//
//===========================================================================
void Clear(this TypewriterOverlay*)
{
  this._RenderClear();
  if (this._o != null && this._o.Valid)
    this._o.Remove();
  this._o = null;
}

//===========================================================================
//
// TypewriterOverlay::Start()
//
//===========================================================================
void Start(this TypewriterOverlay*, String text)
{
  this._RenderStart(TypedTextUtils.SplitText(text, this._width - DEFAULT_DISPLAY_PADDING - INTERNAL_LINE_SPLIT_MISTAKE,
                                             this._font, SCR_NO_VALUE, SCR_NO_VALUE, SCR_NO_VALUE));
  this._o = Overlay.CreateTextual(this._x, this._y, this._width, this._font, this._color, "%s", this.GetStringWithCaret());
}

//===========================================================================
//
// TypewriterOverlay::Tick()
//
//===========================================================================
void Tick(this TypewriterOverlay*)
{
  this._RenderTick();
  if (this._hasChanged)
  {
    this._o.SetText(this._width, this._font, this._color, this.GetStringWithCaret());
    this._hasChanged = false;
  }
}


//===========================================================================
//
// game_start()
//
// Initializes static data.
//
//===========================================================================
function game_start()
{
  TTUtils.MetricsTestString = "WMIygj";
  TTUtils.SplitHintCharacters = " -=+.,:;!?";
}
