
int CustomInventoryWindow::SetFirstVisibleRow(int row)
{
  row = MathUtil.Clamp(row, 0, this.ItemRowsTotal - this.ItemRowsVisible);
  this.FirstRowVisible = row;
  this.LastRowVisible = this.FirstRowVisible + this.ItemRowsVisible - 1;
  this.ShouldRedraw = true;
}

int CustomInventoryWindow::SetFirstVisibleColumn(int column)
{
  column = MathUtil.Clamp(column, 0, this.ItemColumnsTotal - this.ItemColumnsVisible);    
  this.FirstColumnVisible = column;
  this.LastColumnVisible = this.FirstColumnVisible + this.ItemColumnsVisible - 1;
  this.ShouldRedraw = true;
}

void CustomInventoryWindow::ResetToTopLeft()
{
  this.SetFirstVisibleRow(0);
  this.SetFirstVisibleColumn(0);
  this.ShouldRedraw = true;
}

void CustomInventoryWindow::SetItemArrangement(int col_total, int row_total, bool is_row_based)
{
  this.ItemColumnsTotal = col_total;
  this.ItemRowsTotal = row_total;
  this.IsRowBased = is_row_based;
  
  this.ResetToTopLeft();
}

void CustomInventoryWindow::SetWindow(int x, int y, int width, int height, int itemWidth, int itemHeight, int hsep, int vsep)
{
  this.X = x;
  this.Y = y;
  this.Width = width;
  this.Height = height;
  this.ItemWidth = itemWidth;
  this.ItemHeight = itemHeight;
  this.HorSeparator = hsep;
  this.VerSeparator = vsep;
  
  this.ItemColumnsVisible = this.Width / (this.ItemWidth + this.HorSeparator);
  if (this.Width % (this.ItemWidth + this.HorSeparator) >= this.ItemWidth)
    this.ItemColumnsVisible++;
  
  this.ItemRowsVisible = this.Height / (this.ItemHeight + this.VerSeparator);
  if (this.Height % (this.ItemHeight + this.VerSeparator) >= this.ItemHeight)
    this.ItemRowsVisible++;
  
  //Display("itemRowsVisible = %d, itemColumnsVisible = %d", this.itemRowsVisible, this.itemColumnsVisible);
  this.ResetToTopLeft();
}

void CustomInventoryWindow::AddItemToWnd(InventoryItem *item)
{
  this.AddItem(item);
  this.ShouldRedraw = true;
}

void CustomInventoryWindow::RemoveItemFromWnd(InventoryItem *item)
{
  this.RemoveItem(item);
  this.ShouldRedraw = true;
}

InventoryItem* CustomInventoryWindow::GetItemAtSlot(int row, int column, bool countVisibleOnly)
{
  int topLeftItemIndex = this.FirstColumnVisible;
  int itemsInRow;
  
  // limited (known) columns number
  if (this.ItemColumnsTotal >= 0)
  { 
    itemsInRow = this.ItemColumnsTotal;
  }
  // unlimited (unknown) columns number
  else
  {
    itemsInRow = this.ItemColumnsVisible;
  }
  
  topLeftItemIndex += this.FirstRowVisible * itemsInRow;
  
  int icol;
  int irow = this.FirstRowVisible;
  int itemIndex = topLeftItemIndex;
  InventoryItem* invItem = null;
  
  while (itemIndex < this.ItemCount && irow <= this.LastRowVisible)
  {
    icol = this.FirstColumnVisible;
    
    while (itemIndex < this.ItemCount && icol <= this.LastColumnVisible)
    {
      if (icol == column && irow == row)
      {
        return this.Items[itemIndex];
      }
      itemIndex++;
      icol++;
    }
    irow++;
  }
  
  return null;
}

InventoryItem* CustomInventoryWindow::GetItemAtPoint(int x, int y)
{
  x -= this.X;
  y -= this.Y;
  
  int icolumn = x / (this.ItemWidth + this.HorSeparator);
  if (x % (this.ItemWidth + this.HorSeparator) >= this.ItemWidth)
    icolumn++;
  
  int irow = y / (this.ItemHeight + this.VerSeparator);
  if (y % (this.ItemHeight + this.VerSeparator) >= this.ItemHeight)
    irow++;
  
  return this.GetItemAtSlot(irow, icolumn, true);
}

void CustomDrawItem(this CustomInventoryWindow*, DrawingSurface * ds, InventoryItem* item, int x, int y)
{
  // TODO!!! alignment, centering
  ds.DrawingColor = Game.GetColorFromRGB(255, 255, 255);
  ds.DrawRectangle(x, y, x + this.ItemWidth - 1, y + this.ItemHeight - 1);
  
  if (item)
    ds.DrawImage(x, y, item.Graphic);
}
  
void CustomInventoryWindow::Draw(DrawingSurface * ds)
{
  int topLeftItemIndex = this.FirstColumnVisible;
  int itemsInRow;
  
  // limited (known) columns number
  if (this.ItemColumnsTotal >= 0)
  { 
    itemsInRow = this.ItemColumnsTotal;
  }
  // unlimited (unknown) columns number
  else
  {
    itemsInRow = this.ItemColumnsVisible;
  }
  
  //Display("firstColumnVisible = %d, firstRowVisible = %d, itemsInRow = %d", this.firstColumnVisible, this.firstRowVisible, itemsInRow);
  
  topLeftItemIndex += this.FirstRowVisible * itemsInRow;
  
  int icol, x;
  int irow = this.FirstRowVisible;
  int y    = this.Y;
  int itemIndex = topLeftItemIndex;
  int itemCount = 0;
  InventoryItem* invItem = null;
  
  //Display("itemIndex = %d, irow = %d, lastRowVisible = %d", itemIndex, irow, this.lastRowVisible);
  
  while (irow <= this.LastRowVisible)
  {
    icol = this.FirstColumnVisible;
    x = this.X;
    
    //Display("itemIndex = %d, irow = %d, lastRowVisible = %d", itemIndex, irow, this.lastRowVisible);
    
    while (icol <= this.LastColumnVisible)
    {
      //Display("itemIndex = %d, icol = %d, lastColumnVisible = %d", itemIndex, icol, this.lastColumnVisible);
      if (itemIndex < this.ItemCount)
      {
        invItem = this.Items[itemIndex];
        itemIndex++;
      }
      else
        invItem = null;
      this.CustomDrawItem(ds, invItem, x, y);
      icol++;
      x += this.ItemWidth + this.HorSeparator;
    }
    
    irow++;
    y += this.ItemHeight + this.VerSeparator;
  }
  
  this.ShouldRedraw = false;
}
