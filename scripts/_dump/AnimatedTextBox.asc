//===========================================================================
//
// AnimatedTextBox::RecalcDisplay
//
// Calculates derived alignment parameters of base properties supplied by user.
//
//===========================================================================
void RecalcDisplay(this AnimatedTextBox*)
{
  this.ShouldRedraw = true;
  
  int text_height = GetTextHeight("W", this.Font, this.Width);
  if (this.CaretSprite > 0 && text_height < Game.SpriteHeight[this.CaretSprite])
    this.FontHeight = Game.SpriteHeight[this.CaretSprite];
  else
    this.FontHeight = text_height;
  
  if (this.FontHeight > 0 || this.LineSpacing > 0)
    this.MaxVisLines = this.Height / (this.FontHeight + this.LineSpacing);
  else
    this.MaxVisLines = 0;
  this.MaxVisLines = MathUtil.Min(ANIMATEDTEXTBOX_MAXLINES, this.MaxVisLines);
}

//===========================================================================
//
// AnimatedTextBox::SetWindow
//
//===========================================================================
void AnimatedTextBox::SetWindow(int x, int y, int width, int height)
{
  this.X = x;
  this.Y = y;
  this.Width = width;
  this.Height = height;
  this.RecalcDisplay();
}

//===========================================================================
//
// AnimatedTextBox::SetDisplayParams
//
//===========================================================================
void AnimatedTextBox::SetDisplayParams(int bkg_col)
{
  this.BkgColor = bkg_col;
  this.ShouldRedraw = true;
}

//===========================================================================
//
// AnimatedTextBox::SetTextParams
//
//===========================================================================
void AnimatedTextBox::SetTextParams(int font, int txt_col, int caret_sprite, Alignment text_align, int line_spacing)
{
  this.Font = font;
  this.TextColor = txt_col;
  this.CaretSprite = caret_sprite;
  this.TextAlign = text_align;
  this.LineSpacing = line_spacing;
  this.RecalcDisplay();
}

//===========================================================================
//
// AnimatedTextBox::SetAnimParams
//
//===========================================================================
void AnimatedTextBox::SetAnimParams(int typing_delay, int caret_on_time, int caret_off_time)
{
  this.TypingDelay = typing_delay;
  this.CaretOnTime = caret_on_time;
  this.CaretOffTime = caret_off_time;
}

//===========================================================================
//
// AnimatedTextBox::BeginTypingAnim
//
//===========================================================================
void AnimatedTextBox::BeginTypingAnim()
{
  this.TextTypingTimer = this.TypingDelay;
  this.TextTypingIterator = -1;
  this.CaretAnimTimer = this.CaretOnTime + this.CaretOffTime;
  this.ShouldRedraw = true;
}

//===========================================================================
//
// AnimatedTextBox::Clear
//
//===========================================================================
void AnimatedTextBox::Clear()
{
  this.LineCount = 0;
  this.Text = "";
  this.BeginTypingAnim(); // reset typing iterator and timers
}

ExtractedParagraph ParaEx;
export ParaEx;
//===========================================================================
//
// AnimatedTextBox::ExtractParagraph
//
//===========================================================================
bool AnimatedTextBox::ExtractParagraph(String longText)
{  
  int lineStart = 0;        // first character in line
  int lineEnd = 0;          // last character in line
  bool para_break = false;  // paragraph breaker met
  
  ParaEx.Text = null;
  ParaEx.Forward = 0;
  
  this.LineCount = 0;
  
  if (longText == null)
  {
    this.Text = null;
    return false;
  }
  
  this.Text = "";
  
  while (!para_break && this.LineCount < this.MaxVisLines && lineStart <= longText.Length)
  {
    int linewidth = 0;
    int lastBreakIndex = -1;  // last found character that may serve as linebreak;
    bool line_break = false;  // line breaker met
    
    while (!line_break && lineEnd < longText.Length && linewidth <= this.Width)
    {
      if (longText.Chars[lineEnd] == ANIMATEDTEXTBOX_PARA_BREAK)
      {
        para_break = true;
        line_break = true;
      }
      else if (longText.Chars[lineEnd] == ANIMATEDTEXTBOX_LINE_BREAK)
      {
        line_break = true;
      }
      else
      {
        // Measure the current line length
        linewidth = GetTextWidth(longText.Substring(lineStart, lineEnd - lineStart + 1), this.Font);
      
        if (this.CaretSprite > 0)
        {
          linewidth += Game.SpriteWidth[this.CaretSprite];
        }
      
        if (linewidth <= this.Width)
        {        
          if (longText.Chars[lineEnd] == '.' || longText.Chars[lineEnd] == ',' ||
              longText.Chars[lineEnd] == '!' || longText.Chars[lineEnd] == '?' ||
              longText.Chars[lineEnd] == ' ')
          {
            lastBreakIndex = lineEnd;
          }
          lineEnd++;
        }
      }
    }
    
    // Set the last character index for current line
    if (line_break)
      this.LineEndsAt[this.LineCount] = lineEnd - 1;
    else if (lastBreakIndex >= lineStart)
      this.LineEndsAt[this.LineCount] = lastBreakIndex;
    else
      this.LineEndsAt[this.LineCount] = lineEnd;
    lineEnd = this.LineEndsAt[this.LineCount];
    
    if (this.TextAlign == eAlignLeft)
    {
      this.LineX[this.LineCount] = 0;
    }
    else
    {
      linewidth = GetTextWidth(longText.Substring(lineStart, lineEnd - lineStart + 1), this.Font);
      
      if (this.TextAlign == eAlignCentre)
      {
        this.LineX[this.LineCount] = (this.Width / 2) - (linewidth / 2);
      }
      else
      {
        this.LineX[this.LineCount] = this.Width - linewidth;
      }
    }
    
    //Display("num = %d, w = %d, linewidth = %d, linex = %d", this.LineCount, this.width, linewidth, this.LineX[this.LineCount]);
    
    //Display("pre add line = %s, lineStart = %d, lineEnd = %d", this.Text, lineStart, lineEnd);
    
    this.Text = this.Text.Append(longText.Substring(lineStart, lineEnd - lineStart + 1));
    
    //Display("post add line = %s", this.Text);
    
    this.LineCount++;
    lineStart = lineEnd + 1;
    if (line_break || para_break)
      lineStart++;
    lineEnd = lineStart;
  }
  
  this.BeginTypingAnim(); // reset typing iterator and timers
  
  //Display("ExtractParagraph: linesnum = %d, lineEnd = %d", this.LineCount, lineEnd);
  //Display("ExtractParagraph: text = '%s', length = %d", this.Text, this.Text.Length);
  //if (lineEnd < longText.Length)
  //  Display("ExtractParagraph: text to remain = '%s'", longText.Substring(lineEnd, longText.Length - lineEnd + 1));
  //else
  //  Display("ExtractParagraph: text to remain = none");
  
  ParaEx.Text = this.Text;
  ParaEx.Forward = lineEnd;
  return true;
}

//===========================================================================
//
// AnimatedTextBox::IsTextBeingTyped
//
//===========================================================================
bool AnimatedTextBox::IsTextBeingTyped()
{
  return this.Text != null &&
    this.TextTypingIterator >= -1 && this.TextTypingIterator < this.Text.Length;
}

//===========================================================================
//
// AnimatedTextBox::SkipTypingAnim
//
//===========================================================================
void AnimatedTextBox::SkipTypingAnim()
{
  this.TextTypingIterator = this.Text.Length;
  this.ShouldRedraw = true;
}

//===========================================================================
//
// AnimatedTextBox::Update
//
//===========================================================================
void AnimatedTextBox::Update(bool animateCaret)
{
  if (this.Text == null)
  {
    return;
  }

  if (this.TextTypingIterator >= -1)
  {
    if (this.TextTypingIterator < this.Text.Length)
    {
      if (this.TextTypingTimer <= 0)
      {
        this.TextTypingIterator++;
        
        if (this.TextTypingIterator < this.Text.Length)
        {
          this.TextTypingTimer = this.TypingDelay;
        }
        else
        {
          this.CaretAnimTimer = this.CaretOffTime;
        }
        
        this.ShouldRedraw = true;
      }
      else
      {
        this.TextTypingTimer--;
      }
    }
    else if (animateCaret)
    {
      this.CaretAnimTimer--;
      if (this.CaretAnimTimer <= 0)
      {
        this.CaretAnimTimer = this.CaretOnTime + this.CaretOffTime;
      }
      this.ShouldRedraw = true;
    }
  }
}

//===========================================================================
//
// AnimatedTextBox::DrawWindow
//
//===========================================================================
protected void AnimatedTextBox::DrawWindow(DrawingSurface * ds)
{
  ds.DrawingColor = this.BkgColor;
  ds.DrawRectangle(this.X, this.Y, this.X + this.Width - 1, this.Y + this.Height - 1);
}

//===========================================================================
//
// AnimatedTextBox::DrawText
//
//===========================================================================
protected void AnimatedTextBox::DrawText(DrawingSurface * ds, bool drawCaret)
{
  ds.DrawingColor = this.TextColor;
  
  int line_iterator = 0;
  int y = this.Y;
  int line_text_end = -1;
   
  while (line_iterator < this.LineCount && line_text_end < this.TextTypingIterator)
  {
    if (this.LineEndsAt[line_iterator] > this.TextTypingIterator)
    {
      line_text_end = this.TextTypingIterator;
    }
    else
    {
      line_text_end = this.LineEndsAt[line_iterator];
    }
     
    //Display("typeIter = %d, line_end = %d", this.TextTypingIterator,  line_text_end);
    String s;
     
    if (line_iterator == 0)
    {
      s = this.Text.Substring(0, line_text_end + 1);
    }
    else
    {
      s = this.Text.Substring(this.LineEndsAt[line_iterator - 1] + 1,
                                       line_text_end - this.LineEndsAt[line_iterator - 1]);
    }
     
    ds.DrawString(this.LineX[line_iterator] + this.X, y, this.Font, s);
     
    if (drawCaret && this.CaretAnimTimer > this.CaretOffTime)
    {
      if (this.CaretSprite > 0 &&
           (line_text_end == this.TextTypingIterator || line_text_end == this.Text.Length - 1))
      {
        ds.DrawImage(this.LineX[line_iterator] + this.X + GetTextWidth(s, this.Font), 
                      y, this.CaretSprite);
      }
    }
     
    line_iterator++;
    y += this.LineSpacing + this.FontHeight;
  }
}

//===========================================================================
//
// AnimatedTextBox::Draw
//
//===========================================================================
void AnimatedTextBox::Draw(DrawingSurface * ds, bool drawCaret)
{
  this.DrawWindow(ds);
  this.DrawText(ds, drawCaret);
}
