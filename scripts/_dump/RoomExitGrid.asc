//===========================================================================
//
// RoomExitsGrid::Create
//
//===========================================================================
void RoomExitsGrid::Create(int x, int y, int width, int height, int cols, int rows, int slotw, int sloth)
{  
  this.X = x;
  this.Y = y;
  this.Width = width;
  this.Height = height;
  this.Cols = cols;
  this.Rows = rows;
  this.SlotWidth = slotw;
  this.SlotHeight = sloth;
  
  this.HorSpace = (this.Width - (this.SlotWidth * this.Cols)) / (this.Cols - 1);
  this.VerSpace = (this.Height - (this.SlotHeight * this.Rows)) / (this.Rows - 1);
  
  this.ShouldRedraw = true;
}

//===========================================================================
//
// RoomExitsGrid::SetColours
//
//===========================================================================
void RoomExitsGrid::SetColours(int bkgColour, int lineColour, int fillColourNormal, int fillColourClicked)
{
  this.BkgColour = bkgColour;
  this.LineColour = lineColour;
  this.FillColourNormal = fillColourNormal;
  this.FillColourClicked = fillColourClicked;
  this.ShouldRedraw = true;
}

//===========================================================================
//
// RoomExitsGrid::Draw
//
//===========================================================================
void RoomExitsGrid::Draw(DrawingSurface * ds)
{
  int slot;
  int i;
  int j;
  int x;
  int y;
  
  ds.DrawingColor = this.BkgColour;
  ds.DrawRectangle(this.X, this.Y, this.X + this.Width - 1, this.Y + this.Height - 1);
  
  y = this.Y;
  while (j < this.Rows)
  {
    i = 0;
    x = this.X;
    while (i < this.Cols)
    {
      if (this.IsVisible[slot])
      {
        ds.DrawingColor = this.FillColourNormal;
        ds.DrawRectangle(x, y, x + this.SlotWidth - 1, y + this.SlotHeight - 1);
        ds.DrawingColor = this.LineColour;
        ds.DrawLine(x, y, x + this.SlotWidth - 1, y);
        ds.DrawLine(x + this.SlotWidth - 1, y, x + this.SlotWidth - 1, y + this.SlotHeight - 1);
        ds.DrawLine(x + this.SlotWidth - 1, y + this.SlotHeight - 1, x, y + this.SlotHeight - 1);
        ds.DrawLine(x, y + this.SlotHeight - 1, x, y);
      }
      
      x += this.SlotWidth + this.HorSpace;
      i++;
      slot++;
    }
    
    y += this.SlotHeight + this.VerSpace;
    j++;
  }
  
  this.ShouldRedraw = false;
}

//===========================================================================
//
// RoomExitsGrid::OnMouseClick
//
//===========================================================================
bool RoomExitsGrid::OnMouseClick(int x, int y)
{ 
  x -= this.X;
  y -= this.Y;
  if (x < 0 || x >= this.Width || y < 0 || y >= this.Width)
  {
    return false;
  }
    
  int xspace = x / (this.SlotWidth + this.HorSpace);
  int yspace = y / (this.SlotHeight + this.VerSpace);
  
  x -= xspace * (this.SlotWidth + this.HorSpace);
  y -= yspace * (this.SlotHeight + this.VerSpace);
  
  if (x < this.SlotWidth && y < this.SlotHeight)
  {
    int exit = (yspace) * this.Cols + (xspace);
    
    return this.OnExit(exit);
  }
  return false;
}
