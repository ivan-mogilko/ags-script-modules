#define WOT_SPACING 10
#define WOT_SCROLLWIDTH 21
#define WOT_SCROLLARR_SIZE 17
#define WOT_SCROLLARR_VSPACING 0
#define WOT_SCROLLBAR_W 17
#define WOT_SCROLLBAR_VSPACING 1
#define WOT_SCROLL_SPEED 3
#define WOT_SCROLL_DRAWBORDER false

int WOT_ContentMin;
int WOT_ContentMax;
int WOT_ScrollDisplay;
int WOT_ScrollMin;
int WOT_ScrollMax;
int WOT_CurScroll;
DynamicSprite* WOT_SprScroll;

static void WallOfText::Redraw()
{
    lblWallOfText.Y = -WOT_CurScroll;
    
    DrawingSurface* ds = WOT_SprScroll.GetDrawingSurface();
    ds.Clear(COLOR_TRANSPARENT);
    ds.DrawingColor = 0;
    if (WOT_SCROLL_DRAWBORDER) {
        ds.DrawFrame(0, 0, ds.Width - 1, ds.Height - 1);
    }
    int arrow_off = (WOT_SCROLLWIDTH - WOT_SCROLLARR_SIZE) / 2;
    int tx = arrow_off;
    int ty = WOT_SCROLLARR_VSPACING + arrow_off;
    ds.DrawTriangle(tx, ty + WOT_SCROLLARR_SIZE - 1, tx + WOT_SCROLLARR_SIZE / 2, ty, tx + WOT_SCROLLARR_SIZE - 1, ty + WOT_SCROLLARR_SIZE - 1);
    ty = ds.Height - 1 - WOT_SCROLLARR_VSPACING - ty;
    ds.DrawTriangle(tx, ty - WOT_SCROLLARR_SIZE + 1, tx + WOT_SCROLLARR_SIZE / 2, ty, tx + WOT_SCROLLARR_SIZE - 1, ty - WOT_SCROLLARR_SIZE + 1);

    int bar_x = (WOT_SCROLLWIDTH - WOT_SCROLLBAR_W) / 2;
    int bar_y = WOT_SCROLLARR_VSPACING + arrow_off + WOT_SCROLLARR_SIZE + WOT_SCROLLBAR_VSPACING;
    int bar_w = WOT_SCROLLBAR_W;
    int bar_h = ds.Height - (WOT_SCROLLARR_VSPACING + arrow_off + WOT_SCROLLARR_SIZE + WOT_SCROLLBAR_VSPACING) * 2;
    
    int r_y1 = FloatToInt(IntToFloat(WOT_CurScroll * bar_h) / IntToFloat(WOT_ContentMax));
    int r_y2 = FloatToInt(IntToFloat((WOT_CurScroll + WOT_ScrollDisplay - 1) * bar_h) / IntToFloat(WOT_ContentMax));
    ds.DrawRectangle(bar_x, bar_y + r_y1, bar_x + bar_w - 1, bar_y + r_y2);
    ds.Release();
}

static void WallOfText::Show(String info, int font, int x, int y, int w, int h)
{
    int textw = w - WOT_SPACING - WOT_SCROLLWIDTH;
    int texth = GetTextHeight(info, font, textw);
    int fonth = GetFontHeight(font);
    int lines = texth / fonth;
    // Accomodate Label's adding 1 to font's line spacing
    texth += (lines - 1);
    
    // HACKS
    if (font == eFontTypewriter || font == eFontTypewriter2) {
        texth += 4;
    }

    gBriefing.X = x;
    gBriefing.Y = y;
    gBriefing.Width = w;
    gBriefing.Height = h;
    lblWallOfText.X = 0;
    lblWallOfText.Y = 0;
    lblWallOfText.Width = textw;
    lblWallOfText.Height = texth;
    lblWallOfText.Font = font;
    lblWallOfText.Text = info;
    WOT_SprScroll = DynamicSprite.Create(WOT_SCROLLWIDTH, h);
    btnWOTScroll.X = w - WOT_SCROLLWIDTH;
    btnWOTScroll.Y = 0;
    btnWOTScroll.Width = WOT_SCROLLWIDTH;
    btnWOTScroll.Height = h;
    btnWOTScroll.NormalGraphic = WOT_SprScroll.Graphic;
    gBriefing.Visible = true;
    
    WOT_ScrollDisplay = h;
    WOT_ScrollMin = 0;
    WOT_ContentMax = texth;
    if (WOT_ScrollDisplay > WOT_ContentMax) { WOT_ScrollDisplay = WOT_ContentMax; }
    WOT_ScrollMax = texth - WOT_ScrollDisplay;
    if (WOT_ScrollMax < 0) { WOT_ScrollMax = 0; }
    WOT_CurScroll = 0;
    
    WallOfText.Redraw();
}

static void WallOfText::Hide()
{
    gBriefing.Visible = false;
    btnWOTScroll.NormalGraphic = 0;
    if (WOT_SprScroll != null) {
        WOT_SprScroll.Delete();
        WOT_SprScroll = null;
    }
}

#define WOT_BORDER 1
#define WOT_HEADER_PADDING 4
#define WOT_HEADER_SPACING 4
#define WOT_PADDING_LEFT 5
#define WOT_DRAW_BORDER false
DynamicSprite* WOT_Wrapper;
int WOT_TitleHeight;

static void TitledWallOfText::Redraw()
{
    DrawingSurface* ds = WOT_Wrapper.GetDrawingSurface();
    ds.DrawingColor = 0;
    if (WOT_DRAW_BORDER) {
        ds.DrawFrame(0, 0, ds.Width - 1, ds.Height - 1);
    }
    ds.DrawRectangle(0, 0, ds.Width - 1, WOT_TitleHeight - 1);
    ds.Release();
}

static void TitledWallOfText::Show(String title, String text, int title_font, int text_font, int x, int y, int w, int h, int bg_col)
{
    int font_h = GetFontHeight(title_font);
    int title_h = WOT_HEADER_PADDING * 2 + font_h;
    int wot_w = w - WOT_BORDER * 2 - WOT_PADDING_LEFT;
    int wot_h = h - title_h - WOT_BORDER - WOT_HEADER_SPACING;
    int wot_x = x + WOT_BORDER + WOT_PADDING_LEFT;
    int wot_y = y + title_h + WOT_HEADER_SPACING;
    WallOfText.Show(text, text_font, wot_x, wot_y, wot_w, wot_h);
    
    WOT_TitleHeight = title_h;
    lblWOTTitle.X = 0;
    lblWOTTitle.Y = (title_h - font_h) / 2;
    lblWOTTitle.Width = w;
    lblWOTTitle.Height = font_h;
    lblWOTTitle.Font = title_font;
    lblWOTTitle.Text = title;
    WOT_Wrapper = DynamicSprite.Create(w, h);
    gGuiWrapper.X = x;
    gGuiWrapper.Y = y;
    gGuiWrapper.Width = w;
    gGuiWrapper.Height = h;
    gGuiWrapper.BackgroundGraphic = WOT_Wrapper.Graphic;
    gGuiWrapper.Visible = true;
    
    gGuiWrapper.BackgroundColor = bg_col;
    if (bg_col == 0) { gGuiWrapper.BorderColor = 0; }
    else { gGuiWrapper.BorderColor = Game.GetColorFromRGB(1, 1, 1); }

    TitledWallOfText.Redraw();
}

static void TitledWallOfText::Hide()
{
    WallOfText.Hide();
    gGuiWrapper.Visible = false;
    gGuiWrapper.BackgroundGraphic = 0;
    if (WOT_Wrapper != null) {
        WOT_Wrapper.Delete();
        WOT_Wrapper = null;
    }
}


#define HINT_PADDING 5
#define HINT_SPACING 5

static void HintGUI::Show(String text, int font, int x, int y, int w, int h, int bg_col)
{
    gHint.X = x;
    gHint.Y = y;
    gHint.Width = w;
    gHint.Height = h;
    lblHint.X = HINT_PADDING;
    lblHint.Y = HINT_PADDING;
    lblHint.Width = w - HINT_PADDING * 2;
    lblHint.Height = h - HINT_PADDING * 2;
    lblHint.Text = text;
    lblHint.Font = font;

    gHint.BackgroundColor = bg_col;
    if (bg_col == 0) { gHint.BorderColor = 0; }
    else { gHint.BorderColor = Game.GetColorFromRGB(1, 1, 1); }

    gHint.Visible = true;
}

static void HintGUI::Hide()
{
    gHint.Visible = false;
}


static void PauseGUI::Show(String text, int x, int y, int w, int h, int bg_col)
{
    gGamePause.X = x;
    gGamePause.Y = y;
    gGamePause.Width = w;
    gGamePause.Height = h;
    lblGameIsPaused.X = HINT_PADDING;
    lblGameIsPaused.Y = HINT_PADDING;
    lblGameIsPaused.Width = w - HINT_PADDING * 2;
    lblPauseText.X = HINT_PADDING;
    lblPauseText.Y = HINT_PADDING + lblGameIsPaused.Height + HINT_SPACING;
    lblPauseText.Width = w - HINT_PADDING * 2;
    lblPauseText.Height = h - HINT_PADDING - lblPauseText.Y;
    lblPauseText.Text = text;

    gGamePause.BackgroundColor = bg_col;
    if (bg_col == 0) { gGamePause.BorderColor = 0; }
    else { gGamePause.BorderColor = Game.GetColorFromRGB(1, 1, 1); }

    gGamePause.Visible = true;
    PauseGame();
}

static void PauseGUI::Hide()
{
    gGamePause.Visible = false;
    UnPauseGame();
}


function on_key_press(eKeyCode key)
{
    if (gBriefing.Visible) {
        switch (key) {
            case eKeyUpArrow:
            case eKeyDownArrow:
            case eKeyHome:
            case eKeyEnd:
                ClaimEvent(); break;
        }
    }
}

function repeatedly_execute()
{
    if (gBriefing.Visible) {
        if (IsKeyPressed(eKeyUpArrow)) {
            WOT_CurScroll -= WOT_SCROLL_SPEED; if (WOT_CurScroll < WOT_ScrollMin) { WOT_CurScroll = WOT_ScrollMin; }
            WallOfText.Redraw();
        } else if (IsKeyPressed(eKeyDownArrow)) {
            WOT_CurScroll += WOT_SCROLL_SPEED;
            if (WOT_CurScroll > WOT_ScrollMax) { WOT_CurScroll = WOT_ScrollMax; }
            WallOfText.Redraw();
        } else if (IsKeyPressed(eKeyHome)) {
            WOT_CurScroll = WOT_ScrollMin;
            WallOfText.Redraw();
        } else if (IsKeyPressed(eKeyEnd)) {
            WOT_CurScroll = WOT_ScrollMax - WOT_ScrollDisplay;
            WallOfText.Redraw();
        }
    }
}
