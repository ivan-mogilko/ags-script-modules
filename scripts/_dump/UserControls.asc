
DragDrop DragDropInfo;
bool WaitForDrag;
int TicksBeforeDrag;
bool HasJustDropped;

function Clear(this DragDrop *, bool clear_mode)
{
  if (clear_mode)
  {
    this.Mode = eDragDropNone;
    this.DragDelay = 0;
    this.PixelPerfect = false;
    this.TestClickable = false;
  }
  this.IsDragging = false;
  this.IsDropping = false;
  this.Char = null;
  this.Gui = null;
  this.GuiControl = null;
  this.InvItem = null;
  this.RoomObject = null;
  this.OriginX = 0;
  this.OriginY = 0;
  this.CurrentX = 0;
  this.CurrentY = 0;
  this.HandleOffsetX = 0;
  this.HandleOffsetY = 0;
  
  WaitForDrag = true;
  TicksBeforeDrag = 0;
}

static function DragDrop::Revert()
{
  if (DragDropInfo.Mode == eDragDropCharacter)
  {
    DragDropInfo.Char.x = DragDropInfo.OriginX;
    DragDropInfo.Char.y = DragDropInfo.OriginY;
  }
  else if (DragDropInfo.Mode == eDragDropGui)
  {
  }
  else if (DragDropInfo.Mode == eDragDropGuiControl)
  {
    DragDropInfo.GuiControl.X = DragDropInfo.OriginX;
    DragDropInfo.GuiControl.Y = DragDropInfo.OriginY;
  }
  else if (DragDropInfo.Mode == eDragDropInventoryItem)
  {
  }
  else if (DragDropInfo.Mode == eDragDropRoomObject)
  {
  }
  
  DragDropInfo.Clear(false);
}

static function DragDrop::Disable()
{
  DragDrop.Revert();
  DragDropInfo.Mode = eDragDropNone;
}

static function DragDrop::Enable(DragDropMode mode, int drag_delay, bool pixel_perfect, bool test_clickable)
{
  if (mode == eDragDropNone)
  {
    DragDrop.Disable();
  }
  else if (DragDropInfo.Mode == mode)
  {
    DragDropInfo.DragDelay = drag_delay;
    DragDropInfo.PixelPerfect = pixel_perfect;
    DragDropInfo.TestClickable = test_clickable;
    return;
  }
  else
  {
    DragDrop.Revert();
    DragDropInfo.Mode = mode;
    DragDropInfo.DragDelay = drag_delay;
    DragDropInfo.PixelPerfect = pixel_perfect;
    DragDropInfo.TestClickable = test_clickable;
    WaitForDrag = true;
  }
}

static bool DragDrop::IsEnabled()
{
  return DragDropInfo.Mode != eDragDropNone;
}

static bool DragDrop::IsDraggingNow()
{
  return DragDropInfo.IsDragging;
}

static bool DragDrop::IsDroppingNow()
{
  return DragDropInfo.IsDropping;
}

static function DragDrop::Drop()
{
  DragDropInfo.Clear(false);
}

static function DragDrop::DropAt(int x, int y)
{
  if (!DragDropInfo.IsDropping)
  {
    return;
  }
  
  if (DragDropInfo.Mode == eDragDropCharacter)
  {
    DragDropInfo.Char.x = x;
    DragDropInfo.Char.y = y;
  }
  else if (DragDropInfo.Mode == eDragDropGui)
  {
  }
  else if (DragDropInfo.Mode == eDragDropGuiControl)
  {
    DragDropInfo.GuiControl.X = x;
    DragDropInfo.GuiControl.Y = y;
  }
  else if (DragDropInfo.Mode == eDragDropInventoryItem)
  {
  }
  else if (DragDropInfo.Mode == eDragDropRoomObject)
  {
  }
  
  DragDropInfo.Clear(false);
}

function DragDrop::GetInfo()
{
  this.Mode = DragDropInfo.Mode;
  this.DragDelay = DragDropInfo.DragDelay;
  this.PixelPerfect = DragDropInfo.PixelPerfect;
  this.TestClickable = DragDropInfo.TestClickable;
  this.IsDragging = DragDropInfo.IsDragging;
  this.IsDropping = DragDropInfo.IsDropping;
  this.Char = DragDropInfo.Char;
  this.Gui = DragDropInfo.Gui;
  this.GuiControl = DragDropInfo.GuiControl;
  this.InvItem = DragDropInfo.InvItem;
  this.RoomObject = DragDropInfo.RoomObject;
  this.OriginX = DragDropInfo.OriginX;
  this.OriginY = DragDropInfo.OriginY;
  this.CurrentX = DragDropInfo.CurrentX;
  this.CurrentY = DragDropInfo.CurrentY;
  this.HandleOffsetX = DragDropInfo.HandleOffsetX;
  this.HandleOffsetY = DragDropInfo.HandleOffsetY;
}

function DragDrop::GetPosition()
{
  this.IsDragging = DragDropInfo.IsDragging;
  this.IsDropping = DragDropInfo.IsDropping;
  this.CurrentX = DragDropInfo.CurrentX;
  this.CurrentY = DragDropInfo.CurrentY;
}

function DragDrop::GetObject()
{
  this.Mode = DragDropInfo.Mode;
  this.Char = DragDropInfo.Char;
  this.Gui = DragDropInfo.Gui;
  this.GuiControl = DragDropInfo.GuiControl;
  this.InvItem = DragDropInfo.InvItem;
  this.RoomObject = DragDropInfo.RoomObject;
}

bool StartDrag(this DragDrop *)
{
  this.Clear(false);
  
  if (DragDropInfo.Mode == eDragDropNone)
  {
    return false;
  }
  else if (DragDropInfo.Mode == eDragDropCharacter)
  {
    Character *ch = Character.GetAtScreenXY(mouse.x, mouse.y);
    if (ch == null)
    {
      return false;
    }
    this.Char = ch;
    this.OriginX = ch.x;
    this.OriginY = ch.y;
  }
  else if (DragDropInfo.Mode == eDragDropGui)
  {
    GUI *g = GUI.GetAtScreenXY(mouse.x, mouse.y);
    if (g == null)
    {
      return false;
    }
    this.Gui = g;
    this.OriginX = g.X;
    this.OriginY = g.Y;
  }
  else if (DragDropInfo.Mode == eDragDropGuiControl)
  {
    GUIControl *gc;
    if (this.PixelPerfect)
    {
      GUI *g = GUI.GetAtScreenXY(mouse.x, mouse.y);
      if (g)
        gc = PixelPerfectDetection.GetGUIControl(g, mouse.x, mouse.y, this.TestClickable);
    }
    else
      gc = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
    if (gc == null)
    {
      return false;
    }
    this.GuiControl = gc;
    this.OriginX = gc.X;
    this.OriginY = gc.Y;
  }
  else if (DragDropInfo.Mode == eDragDropInventoryItem)
  {
    InventoryItem *inv = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    if (inv == null)
    {
      return false;
    }
    this.InvItem = inv;
    this.OriginX = mouse.x;
    this.OriginY = mouse.y;
  }
  else if (DragDropInfo.Mode == eDragDropRoomObject)
  {
    Object *obj = Object.GetAtScreenXY(mouse.x, mouse.y);
    if (obj == null)
    {
      return false;
    }
    this.RoomObject = obj;
    this.OriginX = obj.X;
    this.OriginY = obj.Y;
  }
  
  this.Mode = DragDropInfo.Mode;
  this.IsDragging = true;
  this.CurrentX = this.OriginX;
  this.CurrentY = this.OriginY;
  this.HandleOffsetX = mouse.x - this.OriginX;
  this.HandleOffsetY = mouse.y - this.OriginY;
  return true;
}

function Drag(this DragDrop *)
{
  if (DragDropInfo.Mode == eDragDropNone)
  {
    return;
  }
  
  this.CurrentX = mouse.x - this.HandleOffsetX;
  this.CurrentY = mouse.y - this.HandleOffsetY;
  
  if (DragDropInfo.Mode == eDragDropCharacter)
  {
    this.Char.x = this.CurrentX;
    this.Char.y = this.CurrentY;
  }
  else if (DragDropInfo.Mode == eDragDropGui)
  {
  }
  else if (DragDropInfo.Mode == eDragDropGuiControl)
  {
    this.GuiControl.X = this.CurrentX;
    this.GuiControl.Y = this.CurrentY;
  }
  else if (DragDropInfo.Mode == eDragDropInventoryItem)
  {
  }
  else if (DragDropInfo.Mode == eDragDropRoomObject)
  {
  }
}

function StartDropping(this DragDrop *)
{
  this.IsDropping = true;
}

function game_start()
{
  // Use the KeyboardMovement module to, per default, replicate the standard
  // keyboard movement of most Sierra games. See KeyboardMovement.txt for more info
  KeyboardMovement.SetMode(eKeyboardMovement_Tapping);
}

function on_key_press(eKeyCode keycode)
{
  // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    uiGameMenu.Open();
  }
  if (keycode == eKeyCtrlQ)  UserRequest.ExitGame(true);   // Ctrl-Q
  if (keycode == eKeyF5) uiSaveGameDialog.Open();   // F5
  if (keycode == eKeyF7) uiRestoreGameDialog.Open();  // F7
  if (keycode == eKeyF9) {
    // F9, asks the player to confirm restarting (so much better to always confirm first)
    UserRequest.RestartGame_(true);
  }
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.bmp");  // F12
  if (keycode == eKeyTab) uiInventoryWindow.Open();  // Tab, show inventory

  // GAME COMMAND SHORTCUTS
  if (keycode == 'W') ActionVerbs.Select(eModeWalkto);
  if (keycode == 'L') ActionVerbs.Select(eModeLookat);
  if (keycode == 'U') ActionVerbs.Select(eModeInteract);
  if (keycode == 'T') ActionVerbs.Select(eModeTalkto);
  if (keycode == 'I') ActionVerbs.Select(eModeUseinv);
}


function on_mouse_click(MouseButton button)
{
  if (IsGamePaused() == 1)
  {
    return;
  }
  
  if (button == eMouseLeft)
  {
    ProcessClick(mouse.x, mouse.y, mouse.Mode);
  }
  else if (button == eMouseRight || button == eMouseWheelSouth)
  {
    // Special processing for non-keptable inventory items;
    // right-click drops them
    if (mouse.Mode == eModeUseinv && player.ActiveInventory != null &&
        player.ActiveInventory.GetProperty("Keptable") == 0)
    {
      // Pickup acts inverse here (as "drop");
      // although inventory items don't have a predefined 'OnPickup' event,
      // so "other click" would be used anyway
      player.ActiveInventory.RunInteraction(eModePickup);
    }
    else
    {
      ActionVerbs.SelectNextVerb();
    }
  }
  else if (button == eMouseMiddle)
  { 
    ProcessClick(mouse.x, mouse.y, eModeWalkto); 
  }
  else if (button == eMouseWheelNorth)
  {
    ActionVerbs.SelectPrevVerb();
  }
  ClaimEvent();
}

function repeatedly_execute()
{
  if (DragDropInfo.Mode != eDragDropNone)
  {
    if (DragDropInfo.IsDragging)
    {
      if (DragDropInfo.IsDropping)
      {
        DragDropInfo.Revert();
      }
      else if (mouse.IsButtonDown(eMouseLeft))
      {
        DragDropInfo.Drag();
      }
      else
      {
        DragDropInfo.StartDropping();
      }
    }
    else
    {
      if (mouse.IsButtonDown(eMouseLeft))
      {
        if (WaitForDrag)
        {
          TicksBeforeDrag++;
          if (TicksBeforeDrag > DragDropInfo.DragDelay)
          {
            DragDropInfo.StartDrag();
            WaitForDrag = false;
          }
        }
      }
      else
      {
        WaitForDrag = true;
        TicksBeforeDrag = 0;
      }
    }
  }
}
