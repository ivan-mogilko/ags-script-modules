//
// Module: Utils
// Author: Ivan Mogilko
//

function SpriteCut::Set(int sprite, int x, int y, int w, int h)
{
  this.BaseSprite = sprite;
  this.X = x;
  this.Y = y;
  this.W = w;
  this.H = h;
  this.Cut = DynamicSprite.CreateFromExistingSprite(this.BaseSprite);
  this.Cut.Crop(this.X, this.Y, this.W, this.H);
}

function SpriteCut::Delete()
{
  if (this.Cut)
    this.Cut.Delete();
  this.Cut = null;
}

/***************************************************************************/
//
// !!!!!!!!   WARNING   !!!!!!!!
// Due certain difficulties (lack of necessary commands in AGS Script)
// this function is now implemented as a very ugly workaround.
// One of the consequences is that after this function is called the
// gui controls may end up in different z-order. :'(
//
/***************************************************************************/
static GUIControl *PixelPerfectDetection::GetGUIControl(GUI *parent, int x, int y, bool test_clickable)
{
  /*
  int count = gui.ControlCount;
  int i = 0;
  int best_zorder = -1;
  GUIControl *best_ctrl = null;
  while (i < count)
  {
    GUIControl *ctrl = gui.Controls[i];
    if (ctrl.Visible && (!test_clickable || ctrl.Clickable))
    {
      if (ctrl.X <= x && ctrl.Y <= y && ctrl.X + ctrl.Width > x && ctrl.Y + ctrl.Height > y)
      {
        if (best_ctrl == null || ctrl.zorder?????
        // WTF!! no way to get GUIControl.ZOrder??????????????
      }
    }
    i++;
  }
  */
  if (parent.ControlCount == 0)
    return null;
  if (x < parent.X || x >= parent.X + parent.Width || y < parent.Y || y >= parent.Y + parent.Height)
    return null;
  
  // Unfortunately there's no way to know GUIControl's ZOrder in AGS 3.2.1.
  // Therefore I have to do this ugly workaround
  GUIControl *zordered[] = new GUIControl[parent.ControlCount];
  int ctrl_index = -1;
  GUIControl *first_found = null;
  GUIControl *found_ctrl = null;
  GUIControl *cur_ctrl = null;
  Button *cur_btn;
  Slider *cur_sl;
  DynamicSprite *test_spr;
  DrawingSurface *test_ds;
  
  // What is basically going on here:
  // 1. Pick the control found at screen's x/y;
  // 2. Test control's graphic to ensure the touched pixel is non-transparent
  // 3a. If there's solid pixel under x/y, choose the control.
  // 3b. Otherwise send control down the Z-Order and repeat until there are untested controls
  bool exit_loop = false;
  while (found_ctrl == null && !exit_loop)
  {
    if (cur_ctrl)
      cur_ctrl.SendToBack();
      
    cur_ctrl = GUIControl.GetAtScreenXY(x, y);
    if (cur_ctrl == null)
      exit_loop = true;
    if (first_found == null)
      first_found = cur_ctrl;
    else if (first_found == cur_ctrl)
      exit_loop = true;
      
    if (!exit_loop && cur_ctrl.OwningGUI == parent)
    {    
      ctrl_index++;
      zordered[ctrl_index] = cur_ctrl;
    
      if (!test_clickable || cur_ctrl.Clickable)
      {
        test_ds = null;
        cur_btn = cur_ctrl.AsButton;
        if (cur_btn)
        {
          test_spr = DynamicSprite.CreateFromExistingSprite(cur_btn.Graphic, true);
          test_ds = test_spr.GetDrawingSurface();
        }
        else
        {
          cur_sl = cur_ctrl.AsSlider;
          if (cur_sl)
          {
            // TODO: slider handle???
            test_spr = DynamicSprite.CreateFromExistingSprite(cur_sl.BackgroundGraphic, true);
            test_ds = test_spr.GetDrawingSurface();
          }
          
          // TODO: other controls? maybe test background color?
        }
        
        if (test_ds)
        {
          if (test_ds.GetPixel(x - cur_ctrl.X + parent.X, y - cur_ctrl.Y + parent.Y) != COLOR_TRANSPARENT)
          {
            found_ctrl = cur_ctrl;
          }
          test_ds.Release();
          test_spr.Delete();
        }
        else
        {
          found_ctrl = cur_ctrl;
        }
      }
    }
    
    //Display("found %d, cur %d, first %d", found_ctrl, cur_ctrl, first_found);
  }
  
  // Restore the controls Z-order
  while (ctrl_index >= 0)
  {
    zordered[ctrl_index].BringToFront();
    ctrl_index--;
  }
  
  return found_ctrl;
}

static function Utils::GameLogicError(String errMessage)
{
  String s = errMessage.Append("[[Press any key to continue.");
  DisplayTopBar(System.ScreenHeight >> 1, 15, 0, "Game logic error", s);
}

static RoomTravelDirection Utils::GetOppositeTravelDirection(RoomTravelDirection dir)
{
  if (dir == eRoomTravelUp) return eRoomTravelDown;
  if (dir == eRoomTravelRight) return eRoomTravelLeft;
  if (dir == eRoomTravelDown) return eRoomTravelUp;
  if (dir == eRoomTravelLeft) return eRoomTravelRight;
  return eRoomTravelUndefined;
}

function FaceDirection(this Character*, TurnDirection dir)
{
  if (dir == eFaceUp)
  {
    this.FaceLocation(this.x, -1000);
  }
}

function DrawFrame(this DrawingSurface*, int x1, int y1, int x2, int y2)
{
  this.DrawLine(x1, y1, x2, y1);
  this.DrawLine(x2, y1, x2, y2);
  this.DrawLine(x1, y2, x2, y2);
  this.DrawLine(x1, y1, x1, y2);
}

function ReplaceColor(this DynamicSprite*, int old_color, int new_color)
{
  //Display("ReplaceColor: %d to %d", old_color, new_color);
  DrawingSurface *ds = this.GetDrawingSurface();
  ds.DrawingColor = new_color;
  int pixel;
  int x = 0;
  int y = 0;
  while (y < ds.Height)
  {
    x = 0;
    while (x < ds.Width)
    {
      pixel = ds.GetPixel(x, y);
      //Display("pixel=%d",pixel);
      if (pixel == old_color)
        ds.DrawPixel(x, y);
      x++;
    }
    y++;
  }
  ds.Release();
}

function ReplaceColor2(this DynamicSprite*, int old_color, int new_color, int old_color2, int new_color2)
{
  //Display("ReplaceColor: %d to %d, %d to %d", old_color, new_color, old_color2, new_color2);
  DrawingSurface *ds = this.GetDrawingSurface();
  int pixel;
  int x = 0;
  int y = 0;
  while (y < ds.Height)
  {
    x = 0;
    while (x < ds.Width)
    {
      pixel = ds.GetPixel(x, y);
      //Display("pixel=%d",pixel);
      if (pixel == old_color)
      {
        ds.DrawingColor = new_color;
        ds.DrawPixel(x, y);
      }
      else if (pixel == old_color2)
      {
        ds.DrawingColor = new_color2;
        ds.DrawPixel(x, y);
      }
      x++;
    }
    y++;
  }
  ds.Release();
}
