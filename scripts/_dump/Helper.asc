//=============================================================================
// Utilities
//=============================================================================
int Max(static Maths, int a, int b)
{
  if (a >= b)
    return a;
  return b;
}

int Min(static Maths, int a, int b)
{
  if (a <= b)
    return a;
  return b;
}

String SafeAppend(static String, String first, String second)
{
  if (first == null)
    return second;
  return first.Append(second);
}

bool ContainsAt(this String *, String substr, int index)
{
  if (String.IsNullOrEmpty(substr))
    return false;
  if (index < 0 || this.Length - index < substr.Length)
    return false;
  int substr_at = 0;
  while (substr_at < substr.Length) {
    if (this.Chars[index] != substr.Chars[substr_at])
      return false;
    index++;
    substr_at++;
  }
  return true;
}

// Helper struct for keeping temp data for substring search algorithm
struct IndexOfExHelper
{
  String S;
  String Needle;
  int NeedleAt;
  int NeedleMatch;
  int At;
};
IndexOfExHelper StrStr;
// Substring search callback: checks current character and tells if needle was found;
// Using this callback helps to do precisely same algorithm regardless of how string
// is being searched (which direction, etc).
bool Test(this IndexOfExHelper*)
{
  // Test if current char is equal to the next char in the needle
  if (this.S.Chars[this.At] == this.Needle.Chars[this.NeedleMatch]) {
    if (this.NeedleMatch == 0)
      this.NeedleAt = this.At;
    this.NeedleMatch++;
    if (this.NeedleMatch == this.Needle.Length)
      return true;
  } else if (this.NeedleMatch > 0) {
    this.NeedleMatch = 0;
    this.At = this.NeedleAt;
  }
  return false;
}

// Find given substring inside the bigger string
int IndexOfEx(this String *, String needle, int from, StringSearch dir)
{
  if (String.IsNullOrEmpty(needle))
    return -1;
  StrStr.S = this;
  StrStr.Needle = needle;
  StrStr.NeedleAt = -1;
  StrStr.NeedleMatch = 0;
  if (dir == eStringSearchForward) {
    StrStr.At = Maths.Max(0, Maths.Min(this.Length, from));
    for (; StrStr.At < this.Length; StrStr.At++) {
      if (StrStr.Test())
        return StrStr.NeedleAt;
    }
  } else if (dir == eStringSearchReverse) {
    StrStr.At = Maths.Max(-1, Maths.Min(this.Length - 1, from));
    for (; StrStr.At >= 0; StrStr.At--) {
      if (StrStr.Test())
        return StrStr.NeedleAt;
    }
  }
}

String Left(this String*, int count)
{
  return this.Substring(0, Maths.Max(0, Maths.Min(count, this.Length)));
}

String Mid(this String*, int index, int count)
{
  index = Maths.Min(index, this.Length);
  if (count < 0)
    count = this.Length - index;
  else
    count = Maths.Min(count, this.Length - index);
  return this.Substring(index, count);
}

String Right(this String*, int count)
{
  count = Maths.Max(0, Maths.Min(count, this.Length));
  return this.Substring(this.Length - count, count);
}

String TakeInQuotes(String text)
{
  return String.Format("\"%s\"", text);
}

//=============================================================================
// StringQueue
//=============================================================================
String get_Delimeter(this StringQueue*)
{
  return this.D;
}

void set_Delimeter(this StringQueue*, String value)
{
  if (value == null)
    value = "";
  this.D = value;
}

void StringQueue::PushNew(String s)
{
  this.S = s;
  if (!String.IsNullOrEmpty(s))
    this.S = this.S.Append(this.D);
}

void StringQueue::Push(String s)
{
  if (!String.IsNullOrEmpty(s))
    this.S = String.SafeAppend(this.S, String.Format("%s%s", s, this.D));
}

// Helper struct for finding pieces of string between delimeters
struct StringField
{
  int CutFrom;
  int DelimAt;
  int DelimLen;
};
StringField SF; // used as return value for FindNextField() and PickRemainingFields()

void PickNextField(this StringQueue*)
{
  bool look_for_quote = this.EnableQuotedStrings && this.S.Chars[0] == '"';
  if (look_for_quote) {
    SF.CutFrom = 1;
    SF.DelimLen = 1;
    SF.DelimAt = this.S.IndexOfEx("\"", 1);
    // look for delimeter folowing closing quotes
    if (this.S.ContainsAt(this.D, SF.DelimAt + 1))
      SF.DelimLen += this.D.Length;
  } else {
    SF.CutFrom = 0;
    SF.DelimLen = this.D.Length;
    if (this.D.Length > 0)
      SF.DelimAt = this.S.IndexOf(this.D);
    else
      SF.DelimAt = -1;
  }
}

void PickRemainingFields(this StringQueue*)
{
  bool look_for_quote = this.EnableQuotedStrings && this.S.Chars[0] == '"';
  if (look_for_quote) {
    SF.CutFrom = 1;
    SF.DelimLen = 1;
    SF.DelimAt = this.S.IndexOfEx("\"", this.S.Length, eStringSearchReverse);
    // look for delimeter folowing closing quotes
    if (this.S.ContainsAt(this.D, SF.DelimAt + 1))
      SF.DelimLen += this.D.Length;
  } else {
    SF.CutFrom = 0;
    if (this.D.Length > 0)
      SF.DelimAt = this.S.IndexOfEx(this.D, this.S.Length, eStringSearchReverse);
    else
      SF.DelimAt = -1;
  }
}

String StringQueue::Peek()
{
  if (String.IsNullOrEmpty(this.S))
    return null;
  this.PickNextField();
  if (SF.CutFrom == 0 && SF.DelimAt < 0)
    return this.S;
  return this.S.Substring(SF.CutFrom, SF.DelimAt - SF.CutFrom);
}

String StringQueue::Pop()
{
  if (String.IsNullOrEmpty(this.S))
    return null;
  this.PickNextField();
  if (SF.CutFrom == 0 && SF.DelimAt < 0) {
    String item = this.S;
    this.S = null;
    return item;
  }
  String item = this.S.Substring(SF.CutFrom, SF.DelimAt - SF.CutFrom);
  this.S      = this.S.Mid(SF.DelimAt + SF.DelimLen);
  return item;
}

String StringQueue::PopAll()
{
  // Cut off the ending delimeter
  if (this.S == null)
    return null;
  this.PickRemainingFields();
  String item;
  if (SF.CutFrom == 0 && SF.DelimAt < 0)
    item = this.S;
  else
    item = this.S.Substring(SF.CutFrom, SF.DelimAt - SF.CutFrom);
  this.S = null;
  return item;
}

//=============================================================================
// LogFile
//=============================================================================
bool LogFile::Open(String filename, bool append)
{
  if (this.F)
    this.F.Close();
  if (append && File.Exists(filename)) {
    this.F = File.Open(filename, eFileAppend);
    this.F.WriteRawLine(""); // make an extra line break to separate previous content
  } else {
    this.F = File.Open(filename, eFileWrite);
  }
}

void LogFile::Close()
{
  if (this.F)
    this.F.Close();
  this.F = null;
}

void LogFile::Write(String text)
{
  if (this.F) {
    DateTime *dt = DateTime.Now;
    this.F.WriteRawLine(String.Format("[%02d:%02d:%02d] %s", dt.Hour, dt.Minute, dt.Second, text));
  }
}

//=============================================================================
// GUI helpers
//=============================================================================
void scrollListBoxDown(ListBox *listBox)
{
  int i = 0;
  while (i < listBox.ItemCount)
  {
    listBox.ScrollDown();
    i++;
  }
}
