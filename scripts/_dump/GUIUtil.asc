
struct CachedSprite
{
	int Num;
	DynamicSprite *Sprite;
};

CachedSprite SpriteMasks[SPRITE_MASK_CACHE_SIZE];

//===========================================================================
//
// SpriteMaskCache::CacheSprite
//
//===========================================================================
static int SpriteMaskCache::CacheSprite(int num)
{
	int last_slot = -1;
	for (int i = 0; i < SPRITE_MASK_CACHE_SIZE; i++)
	{
		if (SpriteMasks[i].Num == 0)
		{
			last_slot = i;
			break;
		}
		if (SpriteMasks[i].Num == num)
			return i;
	}
	
	DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(num);
	if (last_slot >= 0)
	{
		SpriteMasks[last_slot].Num = num;
		SpriteMasks[last_slot].Sprite = spr;
	}
	return last_slot;
}

//===========================================================================
//
// SpriteMaskCache::CacheAndGetSprite
//
//===========================================================================
static DynamicSprite *SpriteMaskCache::CacheAndGetSprite(int num)
{
	int cache_slot = CacheSprite(num);
	if (cache_slot >= 0)
		return SpriteMasks[cache_slot];
	return null;
}

//===========================================================================
//
// SpriteMaskCache::GetSprite
//
//===========================================================================
static DynamicSprite *SpriteMaskCache::GetCachedSprite(int cache_slot)
{
	if (cache_slot >= 0 && cache_slot < SPRITE_MASK_CACHE_SIZE)
		return SpriteMasks[cache_slot].Sprite;
	return null;
}

//===========================================================================
//
// SpriteMaskCache::Clear
//
//===========================================================================
static void SpriteMaskCache::Clear()
{
	// TODO
}

//===========================================================================
//
// SpriteMaskCache::FreeSprite
//
//===========================================================================
static void SpriteMaskCache::FreeSprite(int cache_slot)
{
	// TODO
}

static GUIControl *PixelPerfectDetection::GetGUIControl(GUI *parent, int x, int y, bool test_clickable)
{
  /*
  int count = gui.ControlCount;
  int i = 0;
  int best_zorder = -1;
  GUIControl *best_ctrl = null;
  while (i < count)
  {
    GUIControl *ctrl = gui.Controls[i];
    if (ctrl.Visible && (!test_clickable || ctrl.Clickable))
    {
      if (ctrl.X <= x && ctrl.Y <= y && ctrl.X + ctrl.Width > x && ctrl.Y + ctrl.Height > y)
      {
        if (best_ctrl == null || ctrl.zorder?????
        // WTF!! no way to get GUIControl.ZOrder??????????????
      }
    }
    i++;
  }
  */
  if (parent.ControlCount == 0)
    return null;
  if (x < parent.X || x >= parent.X + parent.Width || y < parent.Y || y >= parent.Y + parent.Height)
    return null;
  
  // Unfortunately there's no way to know GUIControl's ZOrder in AGS 3.2.1.
  // Therefore I have to do this ugly workaround
  GUIControl *zordered[] = new GUIControl[parent.ControlCount];
  int ctrl_index = -1;
  GUIControl *first_found = null;
  GUIControl *found_ctrl = null;
  GUIControl *cur_ctrl = null;
  Button *cur_btn;
  Slider *cur_sl;
  DynamicSprite *test_spr;
  DrawingSurface *test_ds;
  
  // What is basically going on here:
  // 1. Pick the control found at screen's x/y;
  // 2. Test control's graphic to ensure the touched pixel is non-transparent
  // 3a. If there's solid pixel under x/y, choose the control.
  // 3b. Otherwise send control down the Z-Order and repeat until there are untested controls
  bool exit_loop = false;
  while (found_ctrl == null && !exit_loop)
  {
    if (cur_ctrl)
      cur_ctrl.SendToBack();
      
    cur_ctrl = GUIControl.GetAtScreenXY(x, y);
    if (cur_ctrl == null)
      exit_loop = true;
    if (first_found == null)
      first_found = cur_ctrl;
    else if (first_found == cur_ctrl)
      exit_loop = true;
      
    if (!exit_loop && cur_ctrl.OwningGUI == parent)
    {    
      ctrl_index++;
      zordered[ctrl_index] = cur_ctrl;
    
      if (!test_clickable || cur_ctrl.Clickable)
      {
        test_ds = null;
        cur_btn = cur_ctrl.AsButton;
        if (cur_btn)
        {
          test_spr = DynamicSprite.CreateFromExistingSprite(cur_btn.Graphic, true);
          test_ds = test_spr.GetDrawingSurface();
        }
        else
        {
          cur_sl = cur_ctrl.AsSlider;
          if (cur_sl)
          {
            // TODO: slider handle???
            test_spr = DynamicSprite.CreateFromExistingSprite(cur_sl.BackgroundGraphic, true);
            test_ds = test_spr.GetDrawingSurface();
          }
          
          // TODO: other controls? maybe test background color?
        }
        
        if (test_ds)
        {
          if (test_ds.GetPixel(x - cur_ctrl.X + parent.X, y - cur_ctrl.Y + parent.Y) != COLOR_TRANSPARENT)
          {
            found_ctrl = cur_ctrl;
          }
          test_ds.Release();
          test_spr.Delete();
        }
        else
        {
          found_ctrl = cur_ctrl;
        }
      }
    }
    
    //Display("found %d, cur %d, first %d", found_ctrl, cur_ctrl, first_found);
  }
  
  // Restore the controls Z-order
  while (ctrl_index >= 0)
  {
    zordered[ctrl_index].BringToFront();
    ctrl_index--;
  }
  
  return found_ctrl;
}
