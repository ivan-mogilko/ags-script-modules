//
// Module: Audio
// Author: Ivan Mogilko
//

#define NUM_AUDIO_TYPES 4
int AudioVolume[NUM_AUDIO_TYPES];
int VoiceVolume;

static function Audio::SetMasterVolume(int volume)
{
  System.Volume = volume;
}

static function Audio::SetMusicVolume(int volume)
{
  AudioVolume[eAudioTypeMusic] = volume;
  Game.SetAudioTypeVolume(eAudioTypeMusic, volume, eVolExistingAndFuture);
}

static function Audio::SetSoundFXVolume(int volume)
{
  AudioVolume[eAudioTypeAmbientSound] = volume;
  AudioVolume[eAudioTypeSound] = volume;
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound, sldGameSound.Value, eVolExistingAndFuture);
  Game.SetAudioTypeVolume(eAudioTypeSound, sldGameSound.Value, eVolExistingAndFuture);
}

static function Audio::SetVoiceVolume(int volume)
{
  VoiceVolume = volume;
  SetSpeechVolume(volume);
}

static int Audio::GetMasterVolume()
{
  return System.Volume;
}

static int Audio::GetMusicVolume()
{
  return AudioVolume[eAudioTypeMusic];
}

static int Audio::GetSoundFXVolume()
{
  return AudioVolume[eAudioTypeSound];
}

static int Audio::GetVoiceVolume()
{
  return VoiceVolume;
}

AudioChannel * GetPlayingInstance(this AudioClip*, int seekFrom)
{
  int i = 0;
  AudioChannel *ac;
  
  while (i < System.AudioChannelCount)
  {
    ac = System.AudioChannels[i];
    
    if (ac.PlayingClip != null &&
        ac.PlayingClip == this)
    {
      return System.AudioChannels[i];
    }
    i++;
  }
  
  return null;
}

function PlayContinious(this AudioClip*, AudioPriority priority, RepeatStyle repeatStyle)
{
  if (this.GetPlayingInstance() == null)
  {
    this.Play(priority, repeatStyle);
  }
}
